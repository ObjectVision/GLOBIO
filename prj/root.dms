container GLOBIO
{
	container Parameters
	{

	}
	
	unit <uint8> lu_type: nrofrows = 6
	{
		
		//STRING LanduseCodes = 1|10|11|12|30|21|22|40|0
		//STRING LanduseNames =     Urban|Cropland|Forestry|Pasture|Rangeland
		//STRING LandusePriorityCodes = 1|      10|      30|     21|       22

		attribute<string>  Name:           ['Urban', 'Cropland', 'Pasture', 'RangeLand', 'Forestry', 'other'];
		attribute<string>  PartioningName: ['Urban', 'Cropland', 'Pasture', 'RangeLand', 'Forestry', 'other'];
		attribute<lu_type> partioning :=     id(lu_type);
	}
	
	unit<upoint> world_domain := SourceData/CurrentLanduse/ESA_CCI;
	
	container Geography
	{
		unit<fpoint> EPSG_4326 : SpatialReference = "EPSG:4326";
		unit<upoint> nl : Range = "[{3, 50}, {8, 54})]";
	}
	
	container SourceData
	{
		container CurrentLanduse
		{
			unit<upoint> ESA_CCI
			:   StorageName = "%SourceDataDir%/GLOBIO/input/ESACCI_GLOBIO_1992_water1992-2015.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			,   StorageReadOnly = "True"
			{    
			   attribute<UInt8> GridData;
			}
		}
		
		container Regions
		{
			unit<upoint> IMAGE
			:   StorageName = "%SourceDataDir%/GLOBIO/input/ESA_IMAGEregions_10sec_no_water_GLOBIO41cz.tif"
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			,   StorageReadOnly = "True"
			{    
			   attribute<UInt8> GridData;
			   attribute<UInt8> ReadData(CurrentLanduse/ESA_CCI);
			}
			
			unit<uint8> regio 
			: StorageName = "%SourceDataDir%/GLOBIO/input/Regions.csv" // https://models.pbl.nl/image/index.php/Region_classification_map
			, StorageType = "gdal.vect"
			, StorageReadOnly = "True"
			{

			}	
		}
		
		container Suitabilities
		{
			unit<upoint> Urban
			:   StorageName = "%SourceDataDir%/GLOBIO/input/suit_urban.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			,   LazyCalculated = "True"
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> Pasture
			:   StorageName = "%SourceDataDir%/GLOBIO/input/suit_pasture_lu_diff_no_wtr.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> Cropland
			:   StorageName = "%SourceDataDir%/GLOBIO/input/suit_crop_lu_diff_no_wtr_ice_0.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> Forestry
			:   StorageName = "%SourceDataDir%/GLOBIO/input/suit_forestry_2015.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> NotAllocatable
			:   StorageName = "%SourceDataDir%/GLOBIO/input/not_allocatable_ESA-CCI_1992-2015.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    
			   attribute<Bool> GridData;
			   attribute<Bool> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
		}
	}

	container Suitabilities
	{
		attribute<Int32> Urban(world_domain)     := (SourceData/Suitabilities/Urban/ReadData*1000000.0f)[Int32];
		attribute<Int32> Pasture(world_domain)   := (SourceData/Suitabilities/Pasture/ReadData*1000000.0f)[Int32];
		attribute<Int32> Cropland(world_domain)  := (SourceData/Suitabilities/Cropland/ReadData*1000000.0f)[Int32];
		attribute<Int32> Forestry(world_domain)  := (SourceData/Suitabilities/Forestry/ReadData*1000000.0f)[Int32];
		attribute<Int32> Rangeland(world_domain) := Pasture;
		attribute<Int32> Other(world_domain)     := const(1i, world_domain);
	}
	
	container Claims
	{
		unit<UInt8> ClaimPerRegion
		:   StorageName = "%SourceDataDir%/GLOBIO/input/Claim1970.csv" 
		,   StorageType = "gdal.vect"
		,   StorageReadOnly = "True"
		{
			Attribute<UInt8>   Region;
			Attribute<String>  Class := Attribute;
			Attribute<Float32> Claim := Value[Float32];
		}
		
		Container PerLanduse
		{
			unit<UInt8> Urban := select_with_attr_by_cond(ClaimPerRegion, ClaimPerRegion/Class == "Urban");
			unit<UInt8> Pasture := select_with_attr_by_cond(ClaimPerRegion, ClaimPerRegion/Class == "Pasture");
			unit<UInt8> Cropland := select_with_attr_by_cond(ClaimPerRegion, ClaimPerRegion/Class == "Cropland");
			unit<UInt8> Forestry := select_with_attr_by_cond(ClaimPerRegion, ClaimPerRegion/Class == "Forestry");
			unit<UInt8> Rangeland := select_with_attr_by_cond(ClaimPerRegion, ClaimPerRegion/Class == "Rangeland");
		}
		
		Container Final
		{
			//Attribute<UInt32> Urban(SourceData/Regions/meta) := PerLanduse/Urban/Claim[UInt32];
			
			Attribute<UInt32> Urban(SourceData/Regions/meta) := id(SourceData/Regions/meta)>0b &&  id(SourceData/Regions/meta) < 26b ? PerLanduse/Urban/Claim[UInt32] : 0; 
			
			
			Attribute<UInt32> Pasture(SourceData/Regions/meta) := PerLanduse/Pasture/Claim[UInt32];
			Attribute<UInt32> Cropland(SourceData/Regions/meta) := PerLanduse/Cropland/Claim[UInt32];
			Attribute<UInt32> Forestry(SourceData/Regions/meta) := PerLanduse/Forestry/Claim[UInt32];
			Attribute<UInt32> Rangeland(SourceData/Regions/meta) := PerLanduse/Rangeland/Claim[UInt32];
		}
		
		Container Direct
		{
			container Minimum
			{
				Attribute<UInt32> Urban := const(0, SourceData/Regions/regio); 
				Attribute<UInt32> Cropland := const(0, SourceData/Regions/regio); 
				Attribute<UInt32> Pasture := const(0, SourceData/Regions/regio); 
				Attribute<UInt32> Rangeland := const(0, SourceData/Regions/regio); 
				Attribute<UInt32> Forestry := const(0, SourceData/Regions/regio); 
				Attribute<UInt32> Other := const(0, SourceData/Regions/regio); 
			}
			
			container Maximum
			{
				Attribute<UInt32> Urban (SourceData/Regions/regio) : 
				[
				  0.0,3638.670166, 90523.59375, 4040.63623, 3365.979004, 8663.470703, 6959.42041, 2738.556641, 3745.357422, 1574.115479, 1732.821899
				, 65146.80469, 11218.33105, 1439.44519, 5268.691895, 3204.445313, 13798.52051, 4876.30957, 7879.668457, 1013.565735, 27135.78125
				, 5966.749512, 6566.181641, 7919.617676, 8006.295898, 1923.645752, 1825.350464, 0.0, 0.0 
				];
				
				Attribute<UInt32> Cropland (SourceData/Regions/regio) : 
				[
				  0.0,526403.5, 1881232.5, 194834.9063, 116511.9219, 411472.6563, 505247.0938, 230387.5469, 859946.5625, 392298.7813, 125409.6016
				, 950546.4375, 563378.6875, 275019.75, 434585.8125, 384235.0, 1391319.0, 290103.875, 1664221.0, 45668.26563, 989361.625
				, 437636.75, 249525.0938, 57779.60547, 446165.4688, 450059.7813, 226520.6875, 0.0, 0.0 
				];
				
				Attribute<UInt32> Pasture (SourceData/Regions/regio) : 
				[
				  0.0,160921.6094, 2062331.219, 474419.5625, 124050.6584, 1540666.953, 1847737.156, 243661.1563, 1588978.875, 1311185.375, 443114.9688
				, 669037.542, 212700.5, 107952.5233, 102981.3255, 420461.75, 762315.8047, 240564.0, 38716.71875, 1267.14209, 2633200.25
				, 44838.6488, 139781.9968, 8583.033905, 2063806.5, 129788.8125, 1834770.281, 0.0, 0.0 
				];
				
				Attribute<UInt32> Rangeland (SourceData/Regions/regio) : 
				[
				  0.0,0.0, 341151.2813, 311673.0625, 296.0135193, 2131.421875, 511649.5938, 517090.0938, 912086.125, 652090.0, 387414.5938
				, 3305.833008, 0.0, 137.2969971, 58.19789886, 1843156.25, 72858.00781, 1758024.625, 74282.52344, 0.0, 1437345.5
				, 1946.573853, 2565.987549, 331.6116028, 2001798.5, 321017.2813, 298633.2188, 0.0, 0.0 
				];
				
				Attribute<UInt32> Forestry (SourceData/Regions/regio) : 
				[
				  0.0,37645.22266, 105271.752, 973.4341736, 1307.187836, 5407.049652, 38594.02783, 0.0, 62809.72083, 5771.982666, 1345.26136
				, 49366.84565, 25522.79785, 12189.57983, 12592.14819, 163.9916992, 121619.4414, 0.0, 11578.47632, 1535.076447, 49373.39081
				, 18054.65039, 3747.372765, 20682.13834, 7341.843346, 3429.00705, 1618.45631, 0.0, 0.0 
				];
				
				Attribute<UInt32> Other (SourceData/Regions/regio) := pcount(Compacted/regio_rel);
			}
		}
	}
	
	container RegionSets
	{
		attribute<SourceData/Regions/regio> Urban     (world_domain) := SourceData/Regions/IMAGE/FinalData[SourceData/Regions/regio];
		attribute<SourceData/Regions/regio> Pasture   (world_domain) := SourceData/Regions/IMAGE/FinalData[SourceData/Regions/regio];
		attribute<SourceData/Regions/regio> Cropland  (world_domain) := SourceData/Regions/IMAGE/FinalData[SourceData/Regions/regio];
		attribute<SourceData/Regions/regio> Forestry  (world_domain) := SourceData/Regions/IMAGE/FinalData[SourceData/Regions/regio];
		attribute<SourceData/Regions/regio> Rangeland (world_domain) := SourceData/Regions/IMAGE/FinalData[SourceData/Regions/regio];
		attribute<SourceData/Regions/regio> Other     (world_domain) := SourceData/Regions/IMAGE/FinalData[SourceData/Regions/regio];
	}
	
    //unit<uint8> AtomicRegions := SourceData/Regions/regio; //overlay(lu_type/PartioningName, world_domain, RegionSets);
	
	container Compacted
	{
		attribute<Bool> compact_condition(world_domain) := not(SourceData/Suitabilities/NotAllocatable/ReadData);
		unit<uint32> alloc_domain := select_uint32(compact_condition), label = "allocation domain", DialogType = "Map", DialogData = "BaseGrid";
		attribute<alloc_domain> BaseGrid(world_domain) := recollect_by_cond(compact_condition, id(alloc_domain));

		container SuitabilityMaps
		{
			attribute<Int32> Urban(alloc_domain)     := collect_by_cond(alloc_domain, compact_condition, Suitabilities/Urban); //collect_by_cond(alloc_domain, Suitabilities/Urban);
			attribute<Int32> Pasture(alloc_domain)   := collect_by_cond(alloc_domain, compact_condition, Suitabilities/Pasture);
			attribute<Int32> Cropland(alloc_domain)  := collect_by_cond(alloc_domain, compact_condition, Suitabilities/Cropland);
			attribute<Int32> Forestry(alloc_domain)  := collect_by_cond(alloc_domain, compact_condition, Suitabilities/Forestry);
			attribute<Int32> RangeLand(alloc_domain) := Pasture;
			attribute<Int32> Other(alloc_domain)     := collect_by_cond(alloc_domain, compact_condition, Suitabilities/Other);
		}
		
		attribute<SourceData/Regions/regio> regio_rel (alloc_domain) := collect_by_cond(alloc_domain, compact_condition, SourceData/Regions/IMAGE/ReadData);
	}
	
	container FeasibleSolution;
	
	container Templates
	{
		Template AllocateSteppedLanduse
		{
			// begin case parameters
			parameter<string> landuse_name;
			attribute<bool> suitability_augmentation_mask (alloc_domain);
			// end case parameters

			unit<uint8> AtomicRegions := SourceData/Regions/regio
			{
				attribute<.> regio := id(.);
			}
			
			container SuitabilityMaps
			{
				attribute<int32> alloc(alloc_domain) :== 'collect_by_cond(alloc_domain, Compacted/compact_condition, Suitabilities/' + landuse_name + ')*suitability_augmentation_mask[int32]';
				attribute<int32> other(alloc_domain) := collect_by_cond(alloc_domain, Compacted/compact_condition, Suitabilities/Other);
			}
			
			container SteppedClaims
			{
				container Minimum
				{
					Attribute<UInt32> alloc (SourceData/Regions/regio) := const(0, SourceData/Regions/regio);
					Attribute<UInt32> other (SourceData/Regions/regio) := const(0, SourceData/Regions/regio);
				}
				
				container Maximum
				{
					Attribute<UInt32> alloc (SourceData/Regions/regio) :== '/Claims/Direct/Maximum/' + landuse_name;
					Attribute<UInt32> other (SourceData/Regions/regio) := /Claims/Direct/Maximum/Other;
				}
			}
			
			container allocate_step := 
			discrete_alloc(
			Allocation/allocate_stepwise/lu_type/name
			,Compacted/alloc_domain
			,SuitabilityMaps
			,Allocation/allocate_stepwise/lu_type/partioning_rel
			,Allocation/allocate_stepwise/partitioning/Name
			,Allocation/allocate_stepwise/AtomicRegions
			,Compacted/regio_rel
			,SteppedClaims/Minimum
			,SteppedClaims/Maximum
			,0i
			,FeasibleSolution
			)
			{
				attribute<Allocation/allocate_stepwise/lu_type> alloc(world_domain) := landuse[Compacted/BaseGrid];
			}
			
			attribute<Bool> new_suitability_augmentation_mask (alloc_domain) := suitability_augmentation_mask || not(allocate_step/landuse);
		}
	}
	
	container Allocation
	{
		container allocate_stepwise
		{
			unit<uint32> alloc_domain := Compacted/alloc_domain;
			
			unit <uint8> partitioning: nrofrows = 1
			{
				attribute<String> Name : ['regio'];
			}
			
			unit <uint8> lu_type: nrofrows = 2
			{
				attribute<string>  Name:           ['alloc', 'other'];
				attribute<partitioning> partioning_rel := const(0[partitioning], lu_type);
			}

			unit<uint8> AtomicRegions := SourceData/Regions/regio
			{
				attribute<.> regio := id(.);
			}
			
			container Urban_t     := Templates/AllocateSteppedLanduse("Urban", const(True, alloc_domain));
			container Cropland_t  := Templates/AllocateSteppedLanduse("Cropland", Urban_t/new_suitability_augmentation_mask);
			container Forestry_t  := Templates/AllocateSteppedLanduse("Forestry", Urban_t/new_suitability_augmentation_mask);
			container Pasture_t   := Templates/AllocateSteppedLanduse("Pasture", Urban_t/new_suitability_augmentation_mask);
			container Rangeland_t := Templates/AllocateSteppedLanduse("Rangeland", Urban_t/new_suitability_augmentation_mask);

			attribute<uint8> landuse (world_domain) := (  (Urban_t/allocate_step/landuse==0b)[UInt8]*1b 
												        + (Cropland_t/allocate_step/landuse==0b)[UInt8]*10b
														+ (Forestry_t/allocate_step/landuse==0b)[UInt8]*30b
														+ (Pasture_t/allocate_step/landuse==0b)[UInt8]*21b
														+ (Rangeland_t/allocate_step/landuse==0b)[UInt8]*22b)[Compacted/BaseGrid];
		}
		
		/*container allocate_discrete := 
		discrete_alloc(
		lu_type/name
		,Compacted/alloc_domain
		,Compacted/SuitabilityMaps
		,lu_type/partioning
		,lu_type/PartioningName
		,AtomicRegions
		,Compacted/AtomicRegionMap
		,Claims/Direct
		,Claims/Direct
		,0i
		,FeasibleSolution
		)
		{
			attribute<lu_type> alloc (world_domain) := landuse[Compacted/BaseGrid];
		}*/
	}
	
	container Export
	{
		unit<upoint> allocated_landuse_stepped := world_domain
		, StorageName = "%SourceDataDir%/GLOBIO/output/geodms_stepped_allocation.tif" 
		, StorageType = "gdalwrite.grid"
		{
		   attribute<uint8> GridData := Allocation/allocate_stepwise/landuse;
		}
	}
	
}