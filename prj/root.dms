container GLOBIO
{
	container units
	{
		unit<float32> m   := baseunit('m', float32);
		unit<float32> km  := 1000 * m;
		unit<float32> km2 := km * km;
	}
	
	unit<upoint> world_domain := SourceData/CurrentLanduse/ESA_CCI;
	
	
	container Geography
	{
		unit<fpoint> EPSG_4326 : SpatialReference = "EPSG:4326";
		unit<upoint> nl : Range = "[{3, 50}, {8, 54})]";
	}
	
	container SourceData
	{
		container CurrentLanduse
		{
			unit<upoint> ESA_CCI
			:   StorageName = "%SourceDataDir%/GLOBIO/input/ESACCI_GLOBIO_1992_water1992-2015.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			,   StorageReadOnly = "True"
			{    
			   attribute<UInt8> GridData;
			}
		}
		
		container Regions
		{
			unit<upoint> IMAGE
			:   StorageName = "%SourceDataDir%/GLOBIO/input/ESA_IMAGEregions_10sec_no_water_GLOBIO41cz.tif"
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			,   StorageReadOnly = "True"
			{    
			   attribute<UInt8> GridData;
			   attribute<UInt8> ReadData(CurrentLanduse/ESA_CCI);
			}
			
			parameter<string> underscore := '_';
			
			unit<uint8> regio 
			: StorageName = "%SourceDataDir%/GLOBIO/input/Regions.csv" // https://models.pbl.nl/image/index.php/Region_classification_map
			, StorageType = "gdal.vect"
			, StorageReadOnly = "True"
			{
				attribute<UInt8>     Code          := UInt8(Nr);
				attribute<string>    keyUrban      := string(id(.)) + '_Urban';
				attribute<string>    keyString     := string(id(.));
				
				attribute<units/km2> MaxClaimUrban := rjoin(string(id(.)) + '_Urban', Claims/ClaimTable/key, Claims/ClaimTable/Claim);
				
				
				container keyLandUseType := for_each_nedv(
					Allocation/allocate_discrete/lu_type/name 
					, 'keyString + underscore +' + quote(Allocation/allocate_discrete/lu_type/name)
					, regio
					, string
					);
				
				container MaxClaims := for_each_nedv(
					Allocation/allocate_discrete/lu_type/name 
					,'rjoin(keyLandUseType/' + Allocation/allocate_discrete/lu_type/name + ', Claims/ClaimTable/key, Claims/ClaimTable/Claim)'
					, regio
					, units/km2
				);
			}	
		}
		
		container Suitabilities
		{
			unit<upoint> Urban
			:   StorageName = "%SourceDataDir%/GLOBIO/input/suit_urban.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			,   LazyCalculated = "True"
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> Pasture
			:   StorageName = "%SourceDataDir%/GLOBIO/input/suit_pasture_lu_diff_no_wtr.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> Cropland
			:   StorageName = "%SourceDataDir%/GLOBIO/input/suit_crop_lu_diff_no_wtr_ice_0.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> Forestry
			:   StorageName = "%SourceDataDir%/GLOBIO/input/suit_forestry_2015.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> NotAllocatable
			:   StorageName = "%SourceDataDir%/GLOBIO/input/not_allocatable_ESA-CCI_1992-2015.tif"
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			//,   StorageType = "gdal.grid"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    
			   attribute<Bool> GridData;
			   attribute<Bool> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> NotAllocatable1
			:   StorageName = "%SourceDataDir%/GLOBIO/input/not_allocatable_ESA-CCI_1992-2015.tif"
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			//,   StorageType = "gdal.grid"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    

			}
		}
	}

	container Suitabilities : LazyCalculated = "True"
	{
		attribute<Float32> Urban(world_domain)    := SourceData/Suitabilities/Urban/ReadData;
		attribute<Float32> Pasture(world_domain)  := SourceData/Suitabilities/Pasture/ReadData;
		attribute<Float32> Cropland(world_domain) := SourceData/Suitabilities/Cropland/ReadData;
		attribute<Float32> Forestry(world_domain) := SourceData/Suitabilities/Forestry/ReadData;
	}
	
	container Claims
	{
		unit<UInt8> ClaimTable
		:   StorageName = "%SourceDataDir%/GLOBIO/input/Claim1970.csv" 
		,   StorageType = "gdal.vect"
		,   StorageReadOnly = "True"
		{
			Attribute<UInt8>   Region;
			Attribute<String>  Class := Attribute;
			Attribute<units/km2> Claim := Value[units/km2];
			
			Attribute<string> key := String(Region) + '_' + Class;
		}
		
		Container Direct
		{
			parameter<Float32> scale_factor := 1.0f; //0.075f; // 1[km2]/10[arcseconds]
		
			container Minimum //cos(30) * 0.095
			{
				Attribute<UInt32> Urban (SourceData/Regions/regio) := const(0, SourceData/Regions/regio); 
				Attribute<UInt32> Cropland (SourceData/Regions/regio) := const(0, SourceData/Regions/regio); 
				Attribute<UInt32> Pasture (SourceData/Regions/regio) := const(0, SourceData/Regions/regio); 
				Attribute<UInt32> Rangeland (SourceData/Regions/regio) := const(0, SourceData/Regions/regio); 
				Attribute<UInt32> Forestry (SourceData/Regions/regio) := const(0, SourceData/Regions/regio); 
				Attribute<UInt32> Other (SourceData/Regions/regio) := const(0, SourceData/Regions/regio); 
			}
			
			container Maximum
			{
				Attribute<Float32> Urban_unscaled (SourceData/Regions/regio): 
				[
				  0.0,3638.670166, 90523.59375, 4040.63623, 3365.979004, 8663.470703, 6959.42041, 2738.556641, 3745.357422, 1574.115479, 1732.821899
				, 65146.80469, 11218.33105, 1439.44519, 5268.691895, 3204.445313, 13798.52051, 4876.30957, 7879.668457, 1013.565735, 27135.78125
				, 5966.749512, 6566.181641, 7919.617676, 8006.295898, 1923.645752, 1825.350464, 0.0, 0.0 
				];
				
				Attribute<Float32> Cropland_unscaled (SourceData/Regions/regio) : 
				[
				  0.0,526403.5, 1881232.5, 194834.9063, 116511.9219, 411472.6563, 505247.0938, 230387.5469, 859946.5625, 392298.7813, 125409.6016
				, 950546.4375, 563378.6875, 275019.75, 434585.8125, 384235.0, 1391319.0, 290103.875, 1664221.0, 45668.26563, 989361.625
				, 437636.75, 249525.0938, 57779.60547, 446165.4688, 450059.7813, 226520.6875, 0.0, 0.0 
				];
				
				Attribute<Float32> Pasture_unscaled (SourceData/Regions/regio) : 
				[
				  0.0,160921.6094, 2062331.219, 474419.5625, 124050.6584, 1540666.953, 1847737.156, 243661.1563, 1588978.875, 1311185.375, 443114.9688
				, 669037.542, 212700.5, 107952.5233, 102981.3255, 420461.75, 762315.8047, 240564.0, 38716.71875, 1267.14209, 2633200.25
				, 44838.6488, 139781.9968, 8583.033905, 2063806.5, 129788.8125, 1834770.281, 0.0, 0.0 
				];
				
				Attribute<Float32> Rangeland_unscaled (SourceData/Regions/regio) : 
				[
				  0.0,0.0, 341151.2813, 311673.0625, 296.0135193, 2131.421875, 511649.5938, 517090.0938, 912086.125, 652090.0, 387414.5938
				, 3305.833008, 0.0, 137.2969971, 58.19789886, 1843156.25, 72858.00781, 1758024.625, 74282.52344, 0.0, 1437345.5
				, 1946.573853, 2565.987549, 331.6116028, 2001798.5, 321017.2813, 298633.2188, 0.0, 0.0 
				];
				
				Attribute<Float32> Forestry_unscaled (SourceData/Regions/regio) : 
				[
				  0.0,37645.22266, 105271.752, 973.4341736, 1307.187836, 5407.049652, 38594.02783, 0.0, 62809.72083, 5771.982666, 1345.26136
				, 49366.84565, 25522.79785, 12189.57983, 12592.14819, 163.9916992, 121619.4414, 0.0, 11578.47632, 1535.076447, 49373.39081
				, 18054.65039, 3747.372765, 20682.13834, 7341.843346, 3429.00705, 1618.45631, 0.0, 0.0 
				];
				
				Attribute<UInt32> Other (SourceData/Regions/regio) := UInt32(pcount(Compacted/regio_rel));
				
				/*Attribute<UInt64> Urban (SourceData/Regions/regio)     := UInt64(Float32(Urban_unscaled               / scale_factor));
				Attribute<UInt64> Cropland (SourceData/Regions/regio)  := UInt64(Float32(Cropland_unscaled            / scale_factor));
				Attribute<UInt64> Pasture (SourceData/Regions/regio)   := UInt64(Float32(Pasture_unscaled             / scale_factor));
				Attribute<UInt64> Rangeland (SourceData/Regions/regio) := UInt64(Float32(Rangeland_unscaled           / scale_factor));
				Attribute<UInt64> Forestry (SourceData/Regions/regio)  := UInt64(Float32(Forestry_unscaled            / scale_factor));
				Attribute<UInt64> Other (SourceData/Regions/regio)     := const(4294967294u64, (SourceData/Regions/regio));//UInt32(Other_unscaled / scale_factor);*/
				
				Attribute<UInt32> Urban (SourceData/Regions/regio)     := UInt32(Urban_unscaled);
				Attribute<UInt32> Cropland (SourceData/Regions/regio)  := UInt32(Cropland_unscaled);
				Attribute<UInt32> Pasture (SourceData/Regions/regio)   := UInt32(Pasture_unscaled);
				Attribute<UInt32> Rangeland (SourceData/Regions/regio) := UInt32(Rangeland_unscaled);
				Attribute<UInt32> Forestry (SourceData/Regions/regio)  := UInt32(Forestry_unscaled);
				//Attribute<UInt32> Other (SourceData/Regions/regio)     := UInt32(Other_unscaled / scale_factor);
			}
		}
	}
	
	container Compacted
	{
		attribute<Bool> compact_condition(world_domain) := not(SourceData/Suitabilities/NotAllocatable/ReadData);
		unit<uint32> alloc_domain := select_uint32(compact_condition), label = "allocation domain", DialogType = "Map", DialogData = "BaseGrid";
		attribute<alloc_domain> BaseGrid(world_domain) := recollect_by_cond(compact_condition, id(alloc_domain));

		container SuitabilityMaps
		{
			attribute<Int32> Urban(alloc_domain)     := (collect_by_cond(alloc_domain, compact_condition, Suitabilities/Urban)*1000000.0f)[Int32];
			attribute<Int32> Pasture(alloc_domain)   := (collect_by_cond(alloc_domain, compact_condition, Suitabilities/Pasture)*1000000.0f)[Int32];
			attribute<Int32> Cropland(alloc_domain)  := (collect_by_cond(alloc_domain, compact_condition, Suitabilities/Cropland)*1000000.0f)[Int32];
			attribute<Int32> Forestry(alloc_domain)  := (collect_by_cond(alloc_domain, compact_condition, Suitabilities/Forestry)*1000000.0f)[Int32];
			attribute<Int32> RangeLand(alloc_domain) := Pasture;
			attribute<Int32> Other(alloc_domain)     := const(1i, alloc_domain);
		}
		
		attribute<SourceData/Regions/regio> regio_rel (alloc_domain) := collect_by_cond(alloc_domain, compact_condition, SourceData/Regions/IMAGE/ReadData);
	}
	
	container FeasibleSolution;
	
	container Templates
	{
		Template AllocateSteppedLanduse
		{
			// begin case parameters
			parameter<string> landuse_name;
			attribute<bool> suitability_augmentation_mask (alloc_domain);
			// end case parameters

			unit<uint8> AtomicRegions := SourceData/Regions/regio
			{
				attribute<.> regio := id(.);
			}
			
			container SuitabilityMaps
			{
				attribute<int32> alloc(alloc_domain) :== 'Compacted/SuitabilityMaps/' + landuse_name +'*suitability_augmentation_mask[int32]';
				attribute<int32> other(alloc_domain) := Compacted/SuitabilityMaps/Other;
			}
			
			container SteppedClaims
			{
				container Minimum
				{
					Attribute<UInt32> alloc (SourceData/Regions/regio) := const(0, SourceData/Regions/regio);
					Attribute<UInt32> other (SourceData/Regions/regio) := const(0, SourceData/Regions/regio);
				}
				
				container Maximum
				{
					Attribute<UInt32> alloc (SourceData/Regions/regio) :== '/Claims/Direct/Maximum/' + landuse_name;
					Attribute<UInt32> other (SourceData/Regions/regio) := /Claims/Direct/Maximum/Other;
				}
			}
			
			container allocate_step := 
			discrete_alloc(
			Allocation/allocate_stepwise/lu_type/name
			,Compacted/alloc_domain
			,SuitabilityMaps
			,Allocation/allocate_stepwise/lu_type/partioning_rel
			,Allocation/partitioning/Name
			,Allocation/AtomicRegions
			,Compacted/regio_rel
			,SteppedClaims/Minimum
			,SteppedClaims/Maximum
			,0i
			,FeasibleSolution
			)
			{
				attribute<Allocation/allocate_stepwise/lu_type> alloc(world_domain) := landuse[Compacted/BaseGrid];
			}
			
			attribute<Bool> new_suitability_augmentation_mask (alloc_domain) := suitability_augmentation_mask || not(allocate_step/landuse);
		}
	}
	
	container Allocation
	{
		unit<uint8> AtomicRegions := SourceData/Regions/regio
		{
			attribute<.> regio := id(.);
		}
	
		unit <uint8> partitioning: nrofrows = 1
		{
			attribute<String> Name : ['regio'];
		}
	
		container allocate_stepwise
		{
			unit<uint32> alloc_domain := Compacted/alloc_domain;
			unit <uint8> lu_type: nrofrows = 2
			{
				attribute<string>  Name:           ['alloc', 'other'];
				attribute<partitioning> partioning_rel := const(0[partitioning], lu_type);
			}
			
			container Urban_t     := Templates/AllocateSteppedLanduse("Urban",     const(True, alloc_domain));
			container Cropland_t  := Templates/AllocateSteppedLanduse("Cropland",  Urban_t/new_suitability_augmentation_mask);
			container Forestry_t  := Templates/AllocateSteppedLanduse("Forestry",  Urban_t/new_suitability_augmentation_mask);
			container Pasture_t   := Templates/AllocateSteppedLanduse("Pasture",   Urban_t/new_suitability_augmentation_mask);
			container Rangeland_t := Templates/AllocateSteppedLanduse("Rangeland", Urban_t/new_suitability_augmentation_mask);


			attribute<uint8> landuse_compacted (alloc_domain) := ((Urban_t/allocate_step/landuse==0b)[UInt8]*1b 
																	+ (Cropland_t/allocate_step/landuse==0b)[UInt8]*10b
																	+ (Forestry_t/allocate_step/landuse==0b)[UInt8]*30b
																	+ (Pasture_t/allocate_step/landuse==0b)[UInt8]*21b
																	+ (Rangeland_t/allocate_step/landuse==0b)[UInt8]*22b); // TODO: transfer over compacted lu per step
			
			attribute<uint8> landuse        (world_domain) := landuse_compacted[Compacted/BaseGrid];
			attribute<uint8> landuse_filled (world_domain) := MakeDefined(landuse, SourceData/CurrentLanduse/ESA_CCI/GridData);					
		}
		
		container allocate_discrete
		{
			
			unit <uint8> lu_type: nrofrows = 6
			{
				attribute<string>  Name:           ['Urban', 'Cropland', 'Pasture', 'RangeLand', 'Forestry', 'other'];
				attribute<partitioning> partioning_rel := const(0[partitioning], lu_type);
			}
			
			
			container allocate := 
			discrete_alloc(
			lu_type/name
			,Compacted/alloc_domain
			,Compacted/SuitabilityMaps
			,Allocation/allocate_discrete/lu_type/partioning_rel
			,Allocation/partitioning/Name
			,Allocation/AtomicRegions
			,Compacted/regio_rel
			,Claims/Direct/Minimum
			,Claims/Direct/Maximum
			,0i
			,FeasibleSolution
			)
			{
				attribute<Allocation/allocate_discrete/lu_type> alloc(world_domain) := landuse[Compacted/BaseGrid];
			}
		}
	}
	
	container Export
	{
		unit<upoint> allocated_landuse_stepped := world_domain
		, StorageName = "%SourceDataDir%/GLOBIO/output/geodms_stepped_allocation.tif" 
		, StorageType = "gdalwrite.grid"
		{
		   attribute<uint8> GridData := Allocation/allocate_stepwise/landuse_filled;
		}
		
		unit<upoint> allocated_landuse_discrete := world_domain
		, StorageName = "%SourceDataDir%/GLOBIO/output/geodms_discrete_allocation.tif" 
		, StorageType = "gdalwrite.grid"
		{
		   attribute<uint8> GridData := Allocation/allocate_discrete/allocate/landuse[Compacted/BaseGrid];
		}
	}
}