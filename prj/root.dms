container GLOBIO
{
	container ConfigSettings { 
		container Overridable { 
			parameter<String> GlobioSourceDataDir:= '%SourceDataDir%/GLOBIO'; 
		}
	}
	
	container parameters
	{
		parameter<bool> use_zeroed_initial_alloc_grid := True;
		parameter<float32> SuitStepFactor := 1000000f;
	}
	
	container units
	{
		unit<float32> m   := baseunit('m', float32);
		unit<float32> km  := 1000 * m;
		unit<float32> km2 := km * km;
	}
	
	unit<upoint> world_domain := SourceData/CurrentLanduse/ESA_CCI;
	
	unit <uint8> partitioning: nrofrows = 1
	{
		attribute<String> Name : ['regio'];
	}
	
	unit <uint8> LandUseType: nrofrows = 6
	{
		attribute<string>  Name:           ['Urban', 'Cropland', 'Pasture', 'RangeLand', 'Forestry', 'other'];
		attribute<string>  NameWithClaims: ['Urban', 'Cropland', 'Pasture', 'Rangeland', 'Forestry'];
		attribute<partitioning> partioning_rel := const(0[partitioning], .);
		attribute<LandUseCode> LandUseCode_rel : [ 1, 10, 30, 21, 22, 0];
		attribute<uint32> BrushColor: [ rgb(255, 0, 0), rgb(255, 255, 0), rgb(128,255,128), rgb(255, 255, 128), rgb(0, 196, 0), rgb(128, 128, 128)], DialogType = "BrushColor";
		
		container V := for_each_nedv(Name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint8> LandUseCode
	{
		attribute<LandUseType> LandUseType_rel := invert(LandUseType/LandUseCode_rel);
	}
	
	unit <uint8> alloc_type: nrofrows = 2
	{
		attribute<string>  Name:           ['alloc', 'other'];
		attribute<partitioning> partioning_rel := const(0[partitioning], alloc_type);
	}
	
	container Geography
	{
		unit<fpoint> EPSG_4326 : SpatialReference = "EPSG:4326";
		unit<upoint> nl : Range = "[{3, 50}, {8, 54})]";
	}
	
	container SourceData: LazyCalculated = "True" 
	{
		container CurrentLanduse
		{
			unit<upoint> ESA_CCI
			:   StorageName = "%GlobioSourceDataDir%/input/ESACCI_GLOBIO_1992_water1992-2015.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   StorageReadOnly = "True"
			{    
			   attribute<LandUseCode> GridData;
			}
		}
		
		unit<upoint> Area
		: 	StorageName = "%GlobioSourceDataDir%/input/areakm2_10sec.tif" 
		,   StorageType = "gdal.grid" 
		,   DialogData  = "Geography/EPSG_4326" 
		,   StorageReadOnly = "True"
		{
		   attribute<units/km2> GridData;
		   attribute<units/km2> ReadData(grid_domain);
		}
		
		unit<upoint> UsageReductionFactor
		: 	StorageName = "%GlobioSourceDataDir%/input/pa_reduce_factor_wdpa_2018_july.tif" 
		,   StorageType = "gdal.grid" 
		,   DialogData  = "Geography/EPSG_4326" 
		,   StorageReadOnly = "True"
		{
		   attribute<Float32> GridData;
		   attribute<Float32> ReadData(grid_domain);
		}
		
		container Regions
		{
			unit<upoint> IMAGE
			:   StorageName = "%GlobioSourceDataDir%/input/ESA_IMAGEregions_10sec_no_water_GLOBIO41cz.tif"
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   StorageReadOnly = "True"
			{    
			   attribute<regio> GridData;
			   attribute<regio> ReadData(grid_domain);
			}
			
			parameter<string> underscore := '_';
			
			unit<uint8> regio
			: StorageName = "%GlobioSourceDataDir%/input/Regions.csv" // https://models.pbl.nl/image/index.php/Region_classification_map
			, StorageType = "gdal.vect"
			, StorageReadOnly = "True"
			, KeepData = "True"
			{
				attribute<string>    keyString     := string(id(.));
				
				container keyLandUseType := for_each_nedv(
					LandUseType/NameWithClaims 
					, 'keyString + underscore +' + quote(LandUseType/NameWithClaims)
					, regio
					, string
					);
				
				container AreaClaims := for_each_nedv(
					LandUseType/NameWithClaims 
					,'rjoin(keyLandUseType/' + LandUseType/NameWithClaims + ', Claims/ClaimTable/key, Claims/ClaimTable/Claim)'
					, regio
					, units/km2
				);
				attribute<string> Label := Countries, DialogType = "LabelText";
			}	
		}
		
		container Suitabilities : LazyCalculated = "True"
		{
			unit<upoint> Urban
			:   StorageName = "%GlobioSourceDataDir%/input/suit_urban.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(grid_domain); 
			}
			
			unit<upoint> Pasture
			:   StorageName = "%GlobioSourceDataDir%/input/suit_pasture_lu_diff_no_wtr.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(grid_domain); 
			}
			
			unit<upoint> Cropland
			:   StorageName = "%GlobioSourceDataDir%/input/suit_crop_lu_diff_no_wtr_ice_0.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(grid_domain); 
			}
			
			unit<upoint> Forestry
			:   StorageName = "%GlobioSourceDataDir%/input/suit_forestry_2015.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(grid_domain); 
			}
			
			unit<upoint> NotAllocatable
			:   StorageName = "%GlobioSourceDataDir%/input/not_allocatable_ESA-CCI_1992-2015.tif"
			,   DialogData  = "Geography/EPSG_4326" 
			{    
			   attribute<Bool> GridData;
			   attribute<Bool> ReadData(grid_domain); 
			}
		}
	}
	unit<upoint> grid_domain := SourceData/CurrentLanduse/ESA_CCI;
	
	container Suitabilities : LazyCalculated = "True"
	{
		attribute<Float32> Urban   (world_domain) := SourceData/Suitabilities/Urban/ReadData;
		attribute<Float32> Pasture (world_domain) := SourceData/Suitabilities/Pasture/ReadData;
		attribute<Float32> Cropland(world_domain) := SourceData/Suitabilities/Cropland/ReadData;
		attribute<Float32> Forestry(world_domain) := SourceData/Suitabilities/Forestry/ReadData;
	}
	
	unit<uint8> AtomicRegions := SourceData/Regions/regio
	{
		attribute<.> regio := id(.);
	}
		
	container Claims
	{
		unit<uint8> ClaimTable
		:   StorageName = "%GlobioSourceDataDir%/input/Claim1970.csv" 
		,   StorageType = "gdal.vect"
		,   StorageReadOnly = "True"
		{
			attribute<uint8>     Region;
			attribute<string>    Class   := Attribute;
			attribute<units/km2> Claim   := Value[units/km2];
			attribute<string>    key     := String(Region) + '_' + Class;
		}
		
		attribute<float32> scale_factors (SourceData/Regions/regio) := mean(SourceData/area/ReadData, SourceData/Regions/IMAGE/ReadData);
		
		parameter<string> underscore := '_';
		attribute<string>    keyString (SourceData/Regions/regio) := string(id(SourceData/Regions/regio));

		container keyLandUseType := for_each_nedv(LandUseType/NameWithClaims 
			, 'keyString + underscore +' + quote(LandUseType/NameWithClaims)
			, SourceData/Regions/regio
			, string
		);

		container Area := for_each_nedv(LandUseType/NameWithClaims 
			,'rjoin(keyLandUseType/' + LandUseType/NameWithClaims + ', Claims/ClaimTable/key, Claims/ClaimTable/Claim)'
			, SourceData/Regions/regio
			, units/km2
		)
		{
			attribute<uint32> Other (SourceData/Regions/regio) := const(4000000000, SourceData/Regions/regio);
		}
		
		container Scaled := for_each_nedv(
			  LandUseType/NameWithClaims
			, 'UInt32(Area/' + LandUseType/NameWithClaims  + '/ scale_factors[units/km2])'
			, SourceData/Regions/regio
			, uint32
		
		)
		{
			attribute<uint32> Other (SourceData/Regions/regio) := Area/Other;
		}
	}
	
	container Compacted
	{
		attribute<Bool> compact_condition(world_domain) := not(SourceData/Suitabilities/NotAllocatable/ReadData);
		unit<uint32> domain := select_uint32(compact_condition), DialogType = "Map", DialogData = "BaseGrid";
		attribute<domain> BaseGrid(world_domain) := recollect_by_cond(compact_condition, id(domain));

		attribute<LandUseCode> CurrentLandUseCode (domain) := collect_by_cond(domain, compact_condition, SourceData/CurrentLanduse/ESA_CCI/GridData);

		attribute<units/km2> area(domain)  := collect_by_cond(domain, compact_condition, SourceData/area/ReadData)[units/km2];
		
		attribute<Float32> UsageReductionFactor (domain) := collect_by_cond(domain, compact_condition, SourceData/UsageReductionFactor/ReadData);
		
		container SuitabilityMaps
		{
			attribute<Int32> Urban(domain)     := (collect_by_cond(domain, compact_condition, Suitabilities/Urban)    * UsageReductionFactor * parameters/SuitStepFactor)[Int32];
			attribute<Int32> Pasture(domain)   := (collect_by_cond(domain, compact_condition, Suitabilities/Pasture)  * UsageReductionFactor * parameters/SuitStepFactor)[Int32];
			attribute<Int32> Cropland(domain)  := (collect_by_cond(domain, compact_condition, Suitabilities/Cropland) * UsageReductionFactor * parameters/SuitStepFactor)[Int32];
			attribute<Int32> Forestry(domain)  := (collect_by_cond(domain, compact_condition, Suitabilities/Forestry) * UsageReductionFactor * parameters/SuitStepFactor)[Int32];
			attribute<Int32> RangeLand(domain) := Pasture;
			attribute<Int32> Other(domain)     := const(0i, domain);
		}
		
		attribute<SourceData/Regions/regio> regio_rel (domain) := collect_by_cond(domain, compact_condition, SourceData/Regions/IMAGE/ReadData);
		
		attribute<LandUseType> initial_alloc_state(domain) := =parameters/use_zeroed_initial_alloc_grid ? 'const(LandUseType/V/other, domain)' : 'CurrentLandUseCode->LandUseType_rel';
	}
	
	unit<uint32> domain := Compacted/domain;
	
	container FeasibleSolution;
	
	container Templates
	{
		Template MakeGrid_t {
			attribute<LandUseType> landuse(domain);			
			parameter<string> OutputFileName;
			
			attribute<LandUseCode> LandUseCode_rel (domain) := landuse->LandUseCode_rel;
			
			attribute<LandUseCode> result(world_domain) := recollect_by_cond(Compacted/compact_condition, LandUseCode_rel)
			, StorageName = "='%GlobioSourceDataDir%/output/'+OutputFileName+'.TIF'"
			, StorageType       = "gdalwrite.grid"
			, DialogData        = "Geography/EPSG_4326";
		}
		
		Template AllocateWeghtedNthElement
		{
			// begin case parameters
			parameter<LanduseType>  CurrLanduseType_rel;
			attribute<LanduseType>  org_alloc_state(domain);
			// end case parameters
			
			parameter<string> landuse_name := CurrLanduseType_rel->name;
			
			attribute<Bool> suitability_augmentation_mask (domain) := org_alloc_state == LandUseType/V/other;
			
			attribute<int32> OrgSuitabilityMap(domain) := ='Compacted/SuitabilityMaps/' + landuse_name;
			attribute<int32> SuitabilityMap(domain) := suitability_augmentation_mask ? OrgSuitabilityMap : -1i, LazyCalculated = "True";
			
			attribute<int64> Rank_1(domain) := int64(SuitabilityMap), LazyCalculated = "True";
			attribute<int64> Rank_2(domain) := Rank_1 * int64(#domain), LazyCalculated = "True";
			attribute<int64> Rank_3(domain) := int64(id(domain)), LazyCalculated = "True";
			attribute<int64> Rank_4(domain) := Rank_2 + Rank_3, LazyCalculated = "True";
			
			attribute<int64> Rank(domain) := - Rank_4, LazyCalculated = "True";
			
			Attribute<Float32> AreaClaim (SourceData/Regions/regio) := ='Claims/Area/' + landuse_name;
				
			attribute<int64> zaaglijn_org (SourceData/Regions/regio) := Nth_element_weighted(Rank, AreaClaim, Compacted/Area, Compacted/regio_rel);
			attribute<int64> zaaglijn(SourceData/Regions/regio) := Min_elem(zaaglijn_org, -1i64), KeepData = "True";
			
			attribute<bool>  allocate(domain) := Rank < zaaglijn[Compacted/regio_rel], LazyCalculated = "True";
			attribute<LanduseType> adjusted_alloc_state(domain) := allocate ? CurrLanduseType_rel : org_alloc_state, LazyCalculated = "True";
			
			attribute<uint32>  sum_per_regio (SourceData/Regions/regio) := sum_uint32(allocate, Compacted/regio_rel);
			attribute<units/km2> area_allocated (domain) := allocate ? Compacted/area : 0[units/km2], LazyCalculated = "True";
			attribute<float32> area_per_regio (SourceData/Regions/regio) := sum(area_allocated, Compacted/regio_rel);
		}
		
		Template SteppedAllocateLanduse
		{
			// begin case parameters
			parameter<LanduseType>  CurrLanduseType_rel;
			attribute<LanduseType>  org_alloc_state(domain);
			// end case parameters
			
			parameter<string> landuse_name := CurrLanduseType_rel->name;
			
			attribute<Bool> suitability_augmentation_mask (domain) := org_alloc_state == LandUseType/V/other;
			
			attribute<int32> OrgSuitabilityMap(domain) := = 'Compacted/SuitabilityMaps/' + landuse_name;
			attribute<int32> SuitabilityMap(domain) := suitability_augmentation_mask ? OrgSuitabilityMap : -1i, LazyCalculated = "True";
			
			container SuitabilityMaps
			{
				attribute<int32> alloc(domain) := SuitabilityMap;
				attribute<int32> other(domain) := const(0i, domain);
			}
			
			container SteppedClaims
			{
				Attribute<UInt32> alloc (SourceData/Regions/regio) :== 'Claims/Scaled/' + landuse_name;
				Attribute<UInt32> other (SourceData/Regions/regio) := const(0, SourceData/Regions/regio);
			}
			
			container allocate_step := discrete_alloc(alloc_type/name
				,domain
				,SuitabilityMaps
				,alloc_type/partioning_rel
				,partitioning/Name
				,AtomicRegions
				,Compacted/regio_rel
				,SteppedClaims ,SteppedClaims
				,0i
				,FeasibleSolution
			)
			{
				
			}

			attribute<bool>  allocate(domain) := (allocate_step/landuse==0b), LazyCalculated = "True";
			attribute<LanduseType> adjusted_alloc_state(domain) := allocate ? CurrLanduseType_rel : org_alloc_state, LazyCalculated = "True";
			
			attribute<uint32>  sum_per_regio (SourceData/Regions/regio) := sum_uint32(allocate, Compacted/regio_rel);
			attribute<units/km2> area_allocated (domain) := allocate ? Compacted/area : 0[units/km2], LazyCalculated = "True";
			attribute<float32> area_per_regio (SourceData/Regions/regio) := sum(area_allocated, Compacted/regio_rel);
		}
	}
	
	container Allocation
	{
		container allocate_weighted_nth_element
		{
			container Urban     := Templates/AllocateWeghtedNthElement(LanduseType/V/Urban,     Compacted/initial_alloc_state);
			container Cropland  := Templates/AllocateWeghtedNthElement(LanduseType/V/Cropland,   Urban/adjusted_alloc_state);
			container Forestry  := Templates/AllocateWeghtedNthElement(LanduseType/V/Forestry,  Cropland/adjusted_alloc_state);
			container Pasture   := Templates/AllocateWeghtedNthElement(LanduseType/V/Pasture,   Forestry/adjusted_alloc_state);
			container Rangeland := Templates/AllocateWeghtedNthElement(LanduseType/V/Rangeland, Pasture/adjusted_alloc_state);

			attribute<LandUseType> Landuse (domain) := rangeland/adjusted_alloc_state;
			container MakeGrid := Templates/MakeGrid_t(landuse, 'WeightedNthElement');
		}
		
		container allocate_stepwise
		{
			container Urban     := Templates/SteppedAllocateLanduse(LanduseType/V/Urban, Compacted/initial_alloc_state);
			container Cropland  := Templates/SteppedAllocateLanduse(LanduseType/V/Cropland,  Urban/adjusted_alloc_state);
			container Forestry  := Templates/SteppedAllocateLanduse(LanduseType/V/Forestry,  Cropland/adjusted_alloc_state);
			container Pasture   := Templates/SteppedAllocateLanduse(LanduseType/V/Pasture,   Forestry/adjusted_alloc_state);
			container Rangeland := Templates/SteppedAllocateLanduse(LanduseType/V/Rangeland, Pasture/adjusted_alloc_state);

			attribute<LandUseType> landuse(domain) := Rangeland/adjusted_alloc_state;
			
			container MakeGrid := Templates/MakeGrid_t(landuse, 'Stepwise');
		}
		
		container allocate_discrete
		{
			container allocate := discrete_alloc(LandUseType/name
				,domain
				,Compacted/SuitabilityMaps
				,LandUseType/partioning_rel
				,partitioning/Name
				,AtomicRegions
				,Compacted/regio_rel
				,Claims/Scaled, Claims/Scaled
				,0i
				,FeasibleSolution
			);
			
			container MakeGrid := Templates/MakeGrid_t(allocate/landuse, 'DiscreteAlloc');
		}
	}
	
	container Export
	{
 		parameter<string> generate_weighted_nth_element := "Ok", ExplicitSuppliers="/Allocation/allocate_weighted_nth_element/MakeGrid/result";
		parameter<string> generate_stepwise_alloc       := "Ok", ExplicitSuppliers="/Allocation/allocate_stepwise/MakeGrid/result";
		parameter<string> generate_competitive_alloc    := "Ok", ExplicitSuppliers="/Allocation/allocate_discrete/MakeGrid/result";
		
		parameter<string> generate_all := generate_weighted_nth_element + generate_stepwise_alloc + generate_competitive_alloc;
	}
	
	container Evaluate
	{
		container reference
		{
			unit<upoint> python_world
			: StorageName = "%GlobioSourceDataDir%/output/world/Globio4_landuse_10sec_1970_World_filled.tif" 
			, StorageType = "gdal.grid"
			, DialogData        = "Geography/EPSG_4326"
			, StorageReadOnly = "True"
			{
				attribute<LanduseCode> GridData;
				attribute<LanduseCode> ReadData (grid_domain);
				
				attribute<LandUseType> LanduseType_rel(grid_domain) := ReadData->LandUseType_rel;
			}
			
			attribute<uint8> globio_results_compacted (domain) := collect_by_cond(domain, compacted/compact_condition, globio_world/ReadData);
		}
		
		container geodms_result
		{
			unit<upoint> dms_world := grid_domain
			, StorageName = "%GlobioSourceDataDir%/output/WeightedNthElement.tif" 
			, StorageType = "gdal.grid"
			, DialogData        = "Geography/EPSG_4326"
			, StorageReadOnly = "True"
			{
				attribute<LanduseCode> GridData;
				
				attribute<LandUseType> LanduseType_rel := GridData->LandUseType_rel;
			}
		}
		
		attribute<bool> is_different(grid_domain) := reference/python_world/LanduseType_rel != geodms_result/dms_world/LandUseType_rel
		{
			attribute<LandUseType> python(grid_domain) := is_different ? reference/python_world/LanduseType_rel  : null_b[LandUseType];
			attribute<LandUseType> geodms(grid_domain) := is_different ? geodms_result/dms_world/LanduseType_rel : null_b[LandUseType];
		}
		
		container indicators 
		{
			unit<uint8> Urban := SourceData/Regions/regio
				, StorageName = "%GlobioSourceDataDir%/output/alloc_differences_urban.csv" 
				, StorageType = "gdalwrite.vect"
				, StorageReadOnly = "False"
			{
				attribute<uint32> globio_num_urban_cells := sum_uint32(reference/globio_world/ReadData==1b, SourceData/Regions/IMAGE/ReadData);
				attribute<uint32> dms_num_urban_cells    := sum_uint32(geodms_result/dms_world/GridData==1b, SourceData/Regions/IMAGE/ReadData);
				attribute<float32> fraction               := float32(globio_num_urban_cells) / float32(dms_num_urban_cells);
				attribute<float32> difference             := float32(globio_num_urban_cells) - float32(dms_num_urban_cells);
			}
			
			unit<uint8> Cropland := SourceData/Regions/regio
				, StorageName = "%GlobioSourceDataDir%/output/alloc_differences_cropland.csv" 
				, StorageType = "gdalwrite.vect"
				, StorageReadOnly = "False"
			{
				attribute<uint32> globio_num_urban_cells := sum_uint32(reference/globio_world/ReadData==10b, SourceData/Regions/IMAGE/ReadData);
				attribute<uint32> dms_num_urban_cells    := sum_uint32(geodms_result/dms_world/GridData==10b, SourceData/Regions/IMAGE/ReadData);
				attribute<float32> fraction               := float32(globio_num_urban_cells) / float32(dms_num_urban_cells);
				attribute<float32> difference             := float32(globio_num_urban_cells) - float32(dms_num_urban_cells);
			}
			
			unit<uint8> Forestry := SourceData/Regions/regio
				, StorageName = "%GlobioSourceDataDir%/output/alloc_differences_forestry.csv" 
				, StorageType = "gdalwrite.vect"
				, StorageReadOnly = "False"
			{
				attribute<uint32> globio_num_urban_cells := sum_uint32(reference/globio_world/ReadData==30b, SourceData/Regions/IMAGE/ReadData);
				attribute<uint32> dms_num_urban_cells    := sum_uint32(geodms_result/dms_world/GridData==30b, SourceData/Regions/IMAGE/ReadData);
				attribute<float32> fraction               := float32(globio_num_urban_cells) / float32(dms_num_urban_cells);
				attribute<float32> difference             := float32(globio_num_urban_cells) - float32(dms_num_urban_cells);
			}
			
			unit<uint8> Pasture := SourceData/Regions/regio
				, StorageName = "%GlobioSourceDataDir%/output/alloc_differences_pasture.csv" 
				, StorageType = "gdalwrite.vect"
				, StorageReadOnly = "False"
			{
				attribute<uint32> globio_num_urban_cells := sum_uint32(reference/globio_world/ReadData==21b, SourceData/Regions/IMAGE/ReadData);
				attribute<uint32> dms_num_urban_cells    := sum_uint32(geodms_result/dms_world/GridData==21b, SourceData/Regions/IMAGE/ReadData);
				attribute<float32> fraction               := float32(globio_num_urban_cells) / float32(dms_num_urban_cells);
				attribute<float32> difference             := float32(globio_num_urban_cells) - float32(dms_num_urban_cells);
			}
			
			unit<uint8> Rangeland := SourceData/Regions/regio
				, StorageName = "%GlobioSourceDataDir%/output/alloc_differences_rangeland.csv" 
				, StorageType = "gdalwrite.vect"
				, StorageReadOnly = "False"
			{
				attribute<uint32> globio_num_urban_cells := sum_uint32(reference/globio_world/ReadData==22b, SourceData/Regions/IMAGE/ReadData);
				attribute<uint32> dms_num_urban_cells    := sum_uint32(geodms_result/dms_world/GridData==22b, SourceData/Regions/IMAGE/ReadData);
				attribute<float32> fraction               := float32(globio_num_urban_cells) / float32(dms_num_urban_cells);
				attribute<float32> difference             := float32(globio_num_urban_cells) - float32(dms_num_urban_cells);
			}
			
		}
	}
}