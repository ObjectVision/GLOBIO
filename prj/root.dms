container GLOBIO
{
	container ConfigSettings { container Overridable {
		parameter<String> GlobioSourceDataDir:= '%SourceDataDir%/GLOBIO';
	}}
	container parameters
	{
		parameter<bool> use_zeroed_initial_alloc_grid := True;
	}
	
	container units
	{
		unit<float32> m   := baseunit('m', float32);
		unit<float32> km  := 1000 * m;
		unit<float32> km2 := km * km;
	}
	
	unit<upoint> world_domain := SourceData/CurrentLanduse/ESA_CCI;
	
	unit <uint8> LandUseType: nrofrows = 6
	{
		attribute<string>  Name:           ['Urban', 'Cropland', 'Pasture', 'RangeLand', 'Forestry', 'other'];
		attribute<string>  NameWithClaims: ['Urban', 'Cropland', 'Pasture', 'Rangeland', 'Forestry'];
		attribute<Allocation/partitioning> partioning_rel := const(0[Allocation/partitioning], types);
	}
	
	container Geography
	{
		unit<fpoint> EPSG_4326 : SpatialReference = "EPSG:4326";
		unit<upoint> nl : Range = "[{3, 50}, {8, 54})]";
	}
	
	container SourceData
	{
		container CurrentLanduse
		{
			unit<upoint> ESA_CCI
			:   StorageName = "%GlobioSourceDataDir%/input/ESACCI_GLOBIO_1992_water1992-2015.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			,   StorageReadOnly = "True"
			{    
			   attribute<UInt8> GridData;
			}
		}
		
		container Area
		{
			unit<upoint> Area_km2
			: 	StorageName = "%GlobioSourceDataDir%/input/areakm2_10sec.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			,   StorageReadOnly = "True"
			,   LazyCalculated = "True"
			{
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(CurrentLanduse/ESA_CCI);
			}
			
			unit<upoint> Protected_areas
			: 	StorageName = "%GlobioSourceDataDir%/input/pa_reduce_factor_wdpa_2018_july.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			,   StorageReadOnly = "True"
			,   LazyCalculated = "True"
			{
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(CurrentLanduse/ESA_CCI);
			}
		}
		
		container Regions
		{
			unit<upoint> IMAGE
			:   StorageName = "%GlobioSourceDataDir%/input/ESA_IMAGEregions_10sec_no_water_GLOBIO41cz.tif"
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			,   StorageReadOnly = "True"
			{    
			   attribute<regio> GridData;
			   attribute<regio> ReadData(CurrentLanduse/ESA_CCI);
			}
			
			parameter<string> underscore := '_';
			
			unit<uint8> regio 
			: StorageName = "%GlobioSourceDataDir%/input/Regions.csv" // https://models.pbl.nl/image/index.php/Region_classification_map
			, StorageType = "gdal.vect"
			, StorageReadOnly = "True"
			{
				attribute<UInt8>     Code          := UInt8(Nr);
				//attribute<string>    keyUrban      := string(id(.)) + '_Urban';
				attribute<string>    keyString     := string(id(.));
				
				//attribute<units/km2> MaxClaimUrban := rjoin(string(id(.)) + '_Urban', Claims/ClaimTable/key, Claims/ClaimTable/Claim);
				
				
				container keyLandUseType := for_each_nedv(
					LandUseType/NameWithClaims 
					, 'keyString + underscore +' + quote(LandUseType/NameWithClaims)
					, regio
					, string
					);
				
				container MaxClaims := for_each_nedv(
					LandUseType/NameWithClaims 
					,'rjoin(keyLandUseType/' + LandUseType/NameWithClaims + ', Claims/ClaimTable/key, Claims/ClaimTable/Claim)'
					, regio
					, units/km2
				);
				attribute<string> Label := Countries, DialogType = "LabelText";
			}	
		}
		
		container Suitabilities : LazyCalculated = "True"
		{
			unit<upoint> Urban
			:   StorageName = "%GlobioSourceDataDir%/input/suit_urban.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"

			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> Pasture
			:   StorageName = "%GlobioSourceDataDir%/input/suit_pasture_lu_diff_no_wtr.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> Cropland
			:   StorageName = "%GlobioSourceDataDir%/input/suit_crop_lu_diff_no_wtr_ice_0.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> Forestry
			:   StorageName = "%GlobioSourceDataDir%/input/suit_forestry_2015.tif" 
			,   StorageType = "gdal.grid" 
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    
			   attribute<Float32> GridData;
			   attribute<Float32> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> NotAllocatable
			:   StorageName = "%GlobioSourceDataDir%/input/not_allocatable_ESA-CCI_1992-2015.tif"
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			//,   StorageType = "gdal.grid"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    
			   attribute<Bool> GridData;
			   attribute<Bool> ReadData(SourceData/CurrentLanduse/ESA_CCI); 
			}
			
			unit<upoint> NotAllocatable1
			:   StorageName = "%GlobioSourceDataDir%/input/not_allocatable_ESA-CCI_1992-2015.tif"
			,   DialogData  = "Geography/EPSG_4326" 
			,   DialogType  = "Map"
			//,   StorageType = "gdal.grid"
			, 	SpatialReference = "Geography/EPSG_4326"
			{    

			}
		}
	}

	container Suitabilities : LazyCalculated = "True"
	{
		attribute<Float32> Urban   (world_domain) := SourceData/Suitabilities/Urban/ReadData;
		attribute<Float32> Pasture (world_domain) := SourceData/Suitabilities/Pasture/ReadData;
		attribute<Float32> Cropland(world_domain) := SourceData/Suitabilities/Cropland/ReadData;
		attribute<Float32> Forestry(world_domain) := SourceData/Suitabilities/Forestry/ReadData;
	}
	
	container Claims
	{
		unit<uint8> ClaimTable
		:   StorageName = "%GlobioSourceDataDir%/input/Claim1970.csv" 
		,   StorageType = "gdal.vect"
		,   StorageReadOnly = "True"
		{
			attribute<uint8>     Region;
			attribute<string>    Class   := Attribute;
			attribute<units/km2> Claim   := Value[units/km2];
			attribute<string>    key     := String(Region) + '_' + Class;
		}
		
		attribute<float32> scale_factors (SourceData/Regions/regio) := mean(SourceData/area/Area_km2/ReadData, SourceData/Regions/IMAGE/ReadData);
		attribute<float64> sf_f64        (SourceData/Regions/regio) := mean(Float64(SourceData/area/Area_km2/ReadData), SourceData/Regions/IMAGE/ReadData);
		attribute<float32> sf_inv        (SourceData/Regions/regio) := 1f / scale_factors;
		attribute<float32> sf_Harmonic   (SourceData/Regions/regio) := mean(1f / SourceData/area/Area_km2/ReadData, SourceData/Regions/IMAGE/ReadData);
		
		
		container test
		{
			parameter<string> underscore := '_';
			attribute<string>    keyString (SourceData/Regions/regio) := string(id(SourceData/Regions/regio));

			container keyLandUseType := for_each_nedv(LandUseType/NameWithClaims 
				, 'keyString + underscore +' + quote(LandUseType/NameWithClaims)
				, SourceData/Regions/regio
				, string
			);

			container MaxClaims := for_each_nedv(LandUseType/NameWithClaims 
				,'rjoin(keyLandUseType/' + LandUseType/NameWithClaims + ', Claims/ClaimTable/key, Claims/ClaimTable/Claim)'
				, SourceData/Regions/regio
				, units/km2
			)
			{
				attribute<uint32> Other (SourceData/Regions/regio) := const(4000000000, SourceData/Regions/regio);
			}
			
			container MaxClaimsScaled := for_each_nedv(
				  LandUseType/NameWithClaims
				, 'UInt32(MaxClaims/' + LandUseType/NameWithClaims  + '/ scale_factors[units/km2])'
				, SourceData/Regions/regio
				, uint32
			
			)
			{
				attribute<uint32> Other (SourceData/Regions/regio) := MaxClaims/Other;
			}
		}		
	}
	
	container Compacted
	{
		attribute<Bool> compact_condition(world_domain) := not(SourceData/Suitabilities/NotAllocatable/ReadData);
		unit<uint32> alloc_domain := select_uint32(compact_condition), label = "allocation domain", DialogType = "Map", DialogData = "BaseGrid";
		attribute<alloc_domain> BaseGrid(world_domain) := recollect_by_cond(compact_condition, id(alloc_domain));

		attribute<uint8> alloc_grid (alloc_domain) := collect_by_cond(alloc_domain, compact_condition, SourceData/CurrentLanduse/ESA_CCI/GridData);

		attribute<units/km2> area(alloc_domain)  := collect_by_cond(alloc_domain, compact_condition, SourceData/area/Area_km2/ReadData)[units/km2];
		
		attribute<Float32> Protected_areas_compacted (alloc_domain) := collect_by_cond(alloc_domain, compact_condition, SourceData/Area/Protected_areas/ReadData);
		container SuitabilityMaps
		{
			attribute<Int32> Urban(alloc_domain)     := (collect_by_cond(alloc_domain, compact_condition, Suitabilities/Urban)    * Protected_areas_compacted * 1000000.0f)[Int32];
			attribute<Int32> Pasture(alloc_domain)   := (collect_by_cond(alloc_domain, compact_condition, Suitabilities/Pasture)  * Protected_areas_compacted * 1000000.0f)[Int32];
			attribute<Int32> Cropland(alloc_domain)  := (collect_by_cond(alloc_domain, compact_condition, Suitabilities/Cropland) * Protected_areas_compacted * 1000000.0f)[Int32];
			attribute<Int32> Forestry(alloc_domain)  := (collect_by_cond(alloc_domain, compact_condition, Suitabilities/Forestry) * Protected_areas_compacted * 1000000.0f)[Int32];
			attribute<Int32> RangeLand(alloc_domain) := Pasture;
			attribute<Int32> Other(alloc_domain)     := const(0i, alloc_domain);
		}
		
		attribute<SourceData/Regions/regio> regio_rel (alloc_domain) := collect_by_cond(alloc_domain, compact_condition, SourceData/Regions/IMAGE/ReadData);
	}
	
	container FeasibleSolution;
	
	container Templates
	{
		Template MakeGrid_t {
			attribute<alloc_type> landuse(alloc_domain);
			attribute<alloc_domain> BaseGrid(world_domain);
			
			attribute<alloc_type> result(world_domain) := lookup(BaseGrid, landuse);
		}
		
		Template AllocateWeghtedNthElement
		{
			// begin case parameters
			parameter<string> landuse_name;
			parameter<uint8>  landuse_code;
			attribute<uint8>  alloc_grid (alloc_domain);
			// end case parameters
			
			attribute<Bool> suitability_augmentation_mask (alloc_domain) := alloc_grid == 0b;
//			attribute<Bool> suitability_augmentation_mask (alloc_domain)      := FenceContainer(suitability_augmentation_mask_calc, 'SuitabilityMask ' + landuse_name);
			
			attribute<int32> SuitabilityMap(alloc_domain) :== 'suitability_augmentation_mask ? Compacted/SuitabilityMaps/' + landuse_name +' : -1i';
			
			Attribute<Float32> AreaClaim (SourceData/Regions/regio) := ='Claims/test/MaxClaims/' + landuse_name;
				
			attribute<int32> zaaglijn_org (SourceData/Regions/regio) := Nth_element_weighted(-SuitabilityMap, AreaClaim, Compacted/Area, Compacted/regio_rel);
			attribute<int32> zaaglijn(SourceData/Regions/regio) := Min_elem(zaaglijn_org, -1i);
			
			container fc_impl {
				attribute<uint8>   adjusted_alloc_grid (alloc_domain) := (zaaglijn[Compacted/regio_rel] <= -SuitabilityMap) ? landuse_code : alloc_grid;
				attribute<uint32>  sum_per_regio (SourceData/Regions/regio) := sum_uint32(adjusted_alloc_grid==landuse_code, Compacted/regio_rel);
				attribute<units/km2> area_allocated (alloc_domain) := adjusted_alloc_grid==landuse_code ? Compacted/area : 0[units/km2];
				attribute<units/km2> area_allocated_globio (alloc_domain) := Evaluate/Reference/globio_results_compacted==landuse_code ? Compacted/area : 0[units/km2]; 
				
				attribute<float32> sum_area_per_regio_dms (SourceData/Regions/regio) := sum(area_allocated, Compacted/regio_rel);
				attribute<float32> sum_area_per_regio_globio (SourceData/Regions/regio) := sum(area_allocated_globio, Compacted/regio_rel);
			}
			container fc := FenceContainer(fc_impl, 'aag '+landuse_name);
			attribute<uint8> adjusted_alloc_grid (alloc_domain) := fc/adjusted_alloc_grid;
		}
		
		Template SteppedAllocateLanduse
		{
			// begin case parameters
			parameter<string> landuse_name;
			parameter<uint8>  landuse_code;
			attribute<uint8>  alloc_grid (alloc_domain);
			// end case parameters
			
			attribute<Bool> suitability_augmentation_mask (alloc_domain) := alloc_grid == 0b;
//			attribute<Bool> suitability_augmentation_mask      (alloc_domain) := FenceContainer(suitability_augmentation_mask_calc, 'SuitabilityMask ' + landuse_name);
			
			unit<uint8> AtomicRegions := SourceData/Regions/regio
			{
				attribute<.> regio := id(.);
			}
			
			container SuitabilityMaps
			{
				attribute<int32> alloc(alloc_domain) :== 'suitability_augmentation_mask ? Compacted/SuitabilityMaps/' + landuse_name +' : -1i';
				attribute<int32> other(alloc_domain) := const(0i, alloc_domain);
			}
			
			container SteppedClaims
			{
				container Minimum
				{
					Attribute<UInt32> alloc (SourceData/Regions/regio) :== 'Claims/test/MaxClaimsScaled/' + landuse_name;
					Attribute<UInt32> other (SourceData/Regions/regio) := const(0, SourceData/Regions/regio);
				}
				
				container Maximum
				{
					Attribute<UInt32> alloc (SourceData/Regions/regio) :== 'Claims/test/MaxClaimsScaled/' + landuse_name;
					Attribute<UInt32> other (SourceData/Regions/regio) :=   Claims/test/MaxClaimsScaled/Other;
				}
			}
			
			container allocate_step := discrete_alloc(Allocation/allocate_stepwise/alloc_type/name
				,Compacted/alloc_domain
				,SuitabilityMaps
				,Allocation/allocate_stepwise/alloc_type/partioning_rel
				,Allocation/partitioning/Name
				,Allocation/AtomicRegions
				,Compacted/regio_rel
				,SteppedClaims/Minimum
				,SteppedClaims/Maximum
				,0i
				,FeasibleSolution
			)
			{
				
			}
							
			container alloc_step_result {
				attribute<alloc_type> landuse(alloc_domain) := allocate_step/landuse;
			}
			container fenced_alloc_step_result := FenceContainer(alloc_step_result, 'allocate stepped ' + landuse_name );
			
			attribute<uint8> adjusted_alloc_grid (alloc_domain) := (fenced_alloc_step_result/landuse==0b) ? landuse_code : alloc_grid;
		}
	}
	
	container Allocation
	{
		unit<uint8> AtomicRegions := SourceData/Regions/regio
		{
			attribute<.> regio := id(.);
		}
	
		unit <uint8> partitioning: nrofrows = 1
		{
			attribute<String> Name : ['regio'];
		}
	
		container allocate_weighted_nth_element
		{
			unit<uint32> alloc_domain := Compacted/alloc_domain;
			unit <uint8> alloc_type: nrofrows = 2
			{
				attribute<string>  Name:           ['alloc', 'other'];
				attribute<partitioning> partioning_rel := const(0[partitioning], alloc_type);
			}
			
			attribute<uint8> initial_alloc_grid (alloc_domain) := parameters/use_zeroed_initial_alloc_grid ? const(0b, alloc_domain) : Compacted/alloc_grid;
			container Urban     := Templates/AllocateWeghtedNthElement("Urban",      1b, initial_alloc_grid);
			container Cropland  := Templates/AllocateWeghtedNthElement("Cropland",  10b, Urban/adjusted_alloc_grid);
			container Forestry  := Templates/AllocateWeghtedNthElement("Forestry",  30b, Cropland/adjusted_alloc_grid);
			container Pasture   := Templates/AllocateWeghtedNthElement("Pasture",   21b, Forestry/adjusted_alloc_grid);
			container Rangeland := Templates/AllocateWeghtedNthElement("Rangeland", 22b, Pasture/adjusted_alloc_grid);

			attribute<uint8> landuse (world_domain) := rangeland/adjusted_alloc_grid[Compacted/BaseGrid];
			
			
			
		}
		
		container allocate_stepwise
		{
			unit<uint32> alloc_domain := Compacted/alloc_domain;
			unit <uint8> alloc_type: nrofrows = 2
			{
				attribute<string>  Name:           ['alloc', 'other'];
				attribute<partitioning> partioning_rel := const(0[partitioning], alloc_type);
			}
			
			attribute<uint8> initial_alloc_grid (alloc_domain) := parameters/use_zeroed_initial_alloc_grid ? const(0b, alloc_domain) : Compacted/alloc_grid;
			container Urban     := Templates/SteppedAllocateLanduse("Urban",      1b, initial_alloc_grid);
			container Cropland  := Templates/SteppedAllocateLanduse("Cropland",  10b, Urban/adjusted_alloc_grid);
			container Forestry  := Templates/SteppedAllocateLanduse("Forestry",  30b, Cropland/adjusted_alloc_grid);
			container Pasture   := Templates/SteppedAllocateLanduse("Pasture",   21b, Forestry/adjusted_alloc_grid);
			container Rangeland := Templates/SteppedAllocateLanduse("Rangeland", 22b, Pasture/adjusted_alloc_grid);

			container ResultContainer {
				attribute<alloc_type> landuse(alloc_domain) := Rangeland/adjusted_alloc_grid;
			}
			container FencedResultContainer := FenceContainer(ResultContainer, 'compacted landuse calculated, now start with generating BaseGrid');
			container MakeGrid := Templates/MakeGrid_t(FencedResultContainer/landuse, Compacted/BaseGrid);
		}
		
		container allocate_discrete
		{
			container allocate := 
			discrete_alloc(
			LandUseType/name
			,Compacted/alloc_domain
			,Compacted/SuitabilityMaps
			,LandUseType/partioning_rel
			,Allocation/partitioning/Name
			,Allocation/AtomicRegions
			,Compacted/regio_rel
			,Claims/Direct/Minimum
			,Claims/Direct/Maximum
			,0i
			,FeasibleSolution
			)
			{
				attribute<LandUseType> alloc(world_domain) := landuse[Compacted/BaseGrid];
			}
		}
	}
	
	container Export
	{
		parameter<string> generate_all := "Ok", ExplicitSuppliers='allocated_landuse_stepped/GridData';
		parameter<string> generate_stepped_discrete    := "Ok", ExplicitSuppliers='allocated_landuse_stepped/GridData';
		parameter<string> generate_discrete  		   := "Ok", ExplicitSuppliers='allocated_landuse_discrete/GridData';
		parameter<string> generate_stepped_nth_element := "Ok", ExplicitSuppliers='allocated_landuse_nth_element/GridData';
		
		unit<upoint> allocated_landuse_stepped := world_domain
		, StorageName       = "%GlobioSourceDataDir%/output/geodms_stepped_allocation.tif" 
		, StorageType       = "gdalwrite.grid"
		, DialogData        = "Geography/EPSG_4326"
		, DialogType        = "Map"
		, SpatialReference  = "Geography/EPSG_4326"
		, ExplicitSuppliers = "Allocation/allocate_stepwise/Rangeland_t/adjusted_alloc_grid"
		, StorageReadOnly   = "False"
		{
		   attribute<uint8> GridData := Allocation/WriteGrid/result, Descr="Geography/EPSG_4326";
		}
		
		unit<upoint> allocated_landuse_discrete := world_domain
		, StorageName = "%GlobioSourceDataDir%/output/geodms_discrete_allocation.tif"
		, StorageType = "gdalwrite.grid"
		, StorageReadOnly = "False"
		{
		   attribute<LandUseType> GridData := Allocation/allocate_discrete/allocate/alloc;
		}
		
		unit<upoint> allocated_landuse_nth_element := world_domain
		, StorageName = "%GlobioSourceDataDir%/output/geodms_discrete_allocation.tif"
		, StorageType = "gdalwrite.grid"
		, StorageReadOnly = "False"
		{
		   attribute<uint8> GridData := Allocation/allocate_weighted_nth_element/landuse;
		}
	}
	
	container Evaluate
	{
		container reference
		{
			unit<upoint> globio_world
			: StorageName = "%GlobioSourceDataDir%/output/world/Globio4_landuse_10sec_1970_World_filled_no_noise.tif" 
			, StorageType = "gdal.grid"
			, DialogData        = "Geography/EPSG_4326"
			, DialogType        = "Map"
			, StorageReadOnly = "True"
			{
				attribute<uint8> GridData;
				attribute<uint8> ReadData (SourceData/CurrentLanduse/ESA_CCI);
			}
			
			attribute<uint8> globio_results_compacted (compacted/alloc_domain) := collect_by_cond(compacted/alloc_domain, compacted/compact_condition, globio_world/ReadData);
		}
		
		container stepped
		{
			unit<upoint> dms_world := SourceData/CurrentLanduse/ESA_CCI
			, StorageName = "%GlobioSourceDataDir%/output/geodms_stepped_allocation.tif" 
			, StorageType = "gdal.grid"
			, DialogData        = "Geography/EPSG_4326"
			, DialogType        = "Map"
			, StorageReadOnly = "True"
			{
				attribute<uint8> GridData;
			}
		}
		
		container discrete
		{
		}
		
		container indicators 
		{
			unit<uint8> Urban := SourceData/Regions/regio
				, StorageName = "%GlobioSourceDataDir%/output/alloc_differences_urban.csv" 
				, StorageType = "gdalwrite.vect"
				, StorageReadOnly = "False"
			{
				attribute<uint32> globio_num_urban_cells := sum_uint32(reference/globio_world/ReadData==1b, SourceData/Regions/IMAGE/ReadData);
				attribute<uint32> dms_num_urban_cells    := sum_uint32(stepped/dms_world/GridData==1b, SourceData/Regions/IMAGE/ReadData);
				attribute<float32> fraction               := float32(globio_num_urban_cells) / float32(dms_num_urban_cells);
				attribute<float32> difference             := float32(globio_num_urban_cells) - float32(dms_num_urban_cells);
			}
			
			unit<uint8> Cropland := SourceData/Regions/regio
				, StorageName = "%GlobioSourceDataDir%/output/alloc_differences_cropland.csv" 
				, StorageType = "gdalwrite.vect"
				, StorageReadOnly = "False"
			{
				attribute<uint32> globio_num_urban_cells := sum_uint32(reference/globio_world/ReadData==10b, SourceData/Regions/IMAGE/ReadData);
				attribute<uint32> dms_num_urban_cells    := sum_uint32(stepped/dms_world/GridData==10b, SourceData/Regions/IMAGE/ReadData);
				attribute<float32> fraction               := float32(globio_num_urban_cells) / float32(dms_num_urban_cells);
				attribute<float32> difference             := float32(globio_num_urban_cells) - float32(dms_num_urban_cells);
			}
			
			unit<uint8> Forestry := SourceData/Regions/regio
				, StorageName = "%GlobioSourceDataDir%/output/alloc_differences_forestry.csv" 
				, StorageType = "gdalwrite.vect"
				, StorageReadOnly = "False"
			{
				attribute<uint32> globio_num_urban_cells := sum_uint32(reference/globio_world/ReadData==30b, SourceData/Regions/IMAGE/ReadData);
				attribute<uint32> dms_num_urban_cells    := sum_uint32(stepped/dms_world/GridData==30b, SourceData/Regions/IMAGE/ReadData);
				attribute<float32> fraction               := float32(globio_num_urban_cells) / float32(dms_num_urban_cells);
				attribute<float32> difference             := float32(globio_num_urban_cells) - float32(dms_num_urban_cells);
			}
			
			unit<uint8> Pasture := SourceData/Regions/regio
				, StorageName = "%GlobioSourceDataDir%/output/alloc_differences_pasture.csv" 
				, StorageType = "gdalwrite.vect"
				, StorageReadOnly = "False"
			{
				attribute<uint32> globio_num_urban_cells := sum_uint32(reference/globio_world/ReadData==21b, SourceData/Regions/IMAGE/ReadData);
				attribute<uint32> dms_num_urban_cells    := sum_uint32(stepped/dms_world/GridData==21b, SourceData/Regions/IMAGE/ReadData);
				attribute<float32> fraction               := float32(globio_num_urban_cells) / float32(dms_num_urban_cells);
				attribute<float32> difference             := float32(globio_num_urban_cells) - float32(dms_num_urban_cells);
			}
			
			unit<uint8> Rangeland := SourceData/Regions/regio
				, StorageName = "%GlobioSourceDataDir%/output/alloc_differences_rangeland.csv" 
				, StorageType = "gdalwrite.vect"
				, StorageReadOnly = "False"
			{
				attribute<uint32> globio_num_urban_cells := sum_uint32(reference/globio_world/ReadData==22b, SourceData/Regions/IMAGE/ReadData);
				attribute<uint32> dms_num_urban_cells    := sum_uint32(stepped/dms_world/GridData==22b, SourceData/Regions/IMAGE/ReadData);
				attribute<float32> fraction               := float32(globio_num_urban_cells) / float32(dms_num_urban_cells);
				attribute<float32> difference             := float32(globio_num_urban_cells) - float32(dms_num_urban_cells);
			}
			
		}
	}
}