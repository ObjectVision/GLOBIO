container GLOBIO
{
	container ConfigSettings { 
		container Overridable { 
			parameter<String> GlobioSourceDataDir:= '%SourceDataDir%/GLOBIO'; 
		}
	}

	#include <parameters.dms>
	#include <units.dms>
	

	
	unit <uint8> partitioning: nrofrows = 1
	{
		attribute<String> Name : ['regio'];
	}
	
	unit <uint8> LandUseType: nrofrows = 6
	{
		attribute<string>  Name:           ['Urban', 'Cropland', 'Pasture', 'RangeLand', 'Forestry', 'other'];
		attribute<string>  NameWithClaims: ['Urban', 'Cropland', 'Pasture', 'Rangeland', 'Forestry'];
		attribute<partitioning> partioning_rel := const(0[partitioning], .);
		attribute<LandUseCode> LandUseCode_rel : [ 1, 10, 21, 22, 30, 0];
		attribute<uint32> BrushColor: [ rgb(255, 0, 0), rgb(128, 128, 0), rgb(128,255,128), rgb(255, 255, 64), rgb(32, 196, 0), rgb(128, 128, 128)], DialogType = "BrushColor";
		attribute<string> Label := Name, DialogType = "LabelText";
		
		container V := for_each_nedv(Name, string(id(.))+'[..]', void, .);
	}
	
	unit<uint8> LandUseCode
	{
		attribute<LandUseType> LandUseType_rel := invert(LandUseType/LandUseCode_rel);
	}
	
	unit <uint8> alloc_type: nrofrows = 2
	{
		attribute<string>  Name:           ['alloc', 'other'];
		attribute<partitioning> partioning_rel := const(0[partitioning], alloc_type);
	}
	
	#include <wms_layer_llh.dms>
	
	#include <Geography.dms>
	
	#include <SourceData.dms>
	
	unit<upoint> grid_domain := SourceData/CurrentLanduse/ESA_CCI;
	
	#include <Suitabilities.dms>
	
	unit<uint8> AtomicRegions := SourceData/Regions/regio
	{
		attribute<.> regio := id(.);
	}
		
	#include <Claims.dms>
	#include <Compacted.dms>
	
	unit<uint32> domain := Compacted/domain;
	
	container FeasibleSolution;
	
	#include <Templates.dms>
	#include <Allocation.dms>
	#include <Export.dms>
	#include <Evaluate.dms>
}