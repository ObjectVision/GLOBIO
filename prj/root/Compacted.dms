container Compacted := Templates/MakeCompactedRegion(254b);

/*

{
	attribute<Bool> compact_condition(Geography/world_domain) := not(SourceData/Suitabilities/NotAllocatable/ReadData);
	unit<uint32> domain := select_uint32(compact_condition), DialogType = "Map", DialogData = "BaseGrid"
	{
//			attribute<world_domain> grid_rel(.) := collect_by_cond(domain, compact_condition, ID(Geography/world_domain));
		attribute<int64> ordinal(.) := collect_by_cond(domain, compact_condition, Geography/world_domain/ordinal);
	}
	attribute<domain> BaseGrid(Geography/world_domain) := recollect_by_cond(compact_condition, id(domain));

	attribute<LandUseCode> CurrentLandUseCode (domain) := collect_by_cond(domain, compact_condition, SourceData/CurrentLanduse/ESA_CCI/GridData);

	attribute<units/km2> area(domain)  := collect_by_cond(domain, compact_condition, SourceData/area/ReadData)[units/km2];
	
	attribute<Float32> UsageReductionFactor (domain) := collect_by_cond(domain, compact_condition, SourceData/UsageReductionFactor/ReadData);
	
	container SuitabilityMaps // implement integrity check not larger than 1.0
	{
		attribute<int32> plateau_augmentation_factor (domain) := int32(mod(uint32(id(domain)), uint32(pow(2f,10f))));
		parameter<float32> SuitStepFactor := pow(2.0f, 20.0f);
		attribute<Int32> Urban(domain)     := int32(collect_by_cond(domain, compact_condition, Suitabilities/Urban)    * UsageReductionFactor * SuitStepFactor) + plateau_augmentation_factor;
		attribute<Int32> Pasture(domain)   := int32(collect_by_cond(domain, compact_condition, Suitabilities/Pasture)  * UsageReductionFactor * SuitStepFactor) + plateau_augmentation_factor;
		attribute<Int32> Cropland(domain)  := int32(collect_by_cond(domain, compact_condition, Suitabilities/Cropland) * UsageReductionFactor * SuitStepFactor) + plateau_augmentation_factor;
		attribute<Int32> Forestry(domain)  := int32(collect_by_cond(domain, compact_condition, Suitabilities/Forestry) * UsageReductionFactor * SuitStepFactor) + plateau_augmentation_factor;
		attribute<Int32> RangeLand(domain) := Pasture;
		attribute<Int32> Other(domain)     := const(0i, domain) + plateau_augmentation_factor;
	}
	
	attribute<SourceData/Regions/regio> regio_rel (domain) := collect_by_cond(domain, compact_condition, SourceData/Regions/IMAGE/ReadData);
	
	parameter<bool> use_zeroed_initial_alloc_grid := True; // necessary for nth-element allocation
	attribute<LandUseType> initial_alloc_state(domain) := = use_zeroed_initial_alloc_grid ? 'const(LandUseType/V/other, domain)' : 'CurrentLandUseCode->LandUseType_rel';
}*/