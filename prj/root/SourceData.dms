container SourceData: LazyCalculated = "True" 
{
	container CurrentLanduse
	{
		unit<upoint> ESA_CCI
		:   StorageName = '=parameters/final/Landuse'
		//,   StorageType = "gdal.grid" 
		,   DialogData  = "Geography/EPSG_4326" 
		,   StorageReadOnly = "True"
		{    
		   attribute<LandUseCode> GridData;
		}
	}
	
	unit<upoint> Area
	: 	StorageName = "=parameters/final/CellAreas" 
	//,   StorageType = "gdal.grid" 
	,   DialogData  = "Geography/EPSG_4326" 
	,   StorageReadOnly = "True"
	{
	   attribute<units/km2> GridData;
	   attribute<units/km2> ReadData(grid_domain);
	}
	
	unit<upoint> NotAllocatable
	:   StorageName = '=parameters/final/NotAllocatableAreas'
	,   DialogData  = "Geography/EPSG_4326"
	,   StorageReadOnly = "True"
	{    
	   attribute<Bool> GridData;
	   attribute<Bool> ReadData(grid_domain); 
	}
	
	unit<upoint> UsageReductionFactor
	: 	StorageName = '=parameters/final/PAReduceFactor'
	//,   StorageType = "gdal.grid" 
	,   DialogData  = "Geography/EPSG_4326" 
	,   StorageReadOnly = "True"
	{
	   attribute<Float32> GridData;
	   attribute<Float32> ReadData(grid_domain);
	}
	
	container Regions
	{
		unit<upoint> IMAGE
		:   StorageName = '=parameters/final/Regions'
		//,   StorageType = "gdal.grid" 
		,   DialogData  = "Geography/EPSG_4326" 
		,   StorageReadOnly = "True"
		{    
		   attribute<regio> GridData;
		   attribute<regio> ReadData(grid_domain);
		}
		
		parameter<string> underscore := '_';
		container regio_raw := Templates/TableChopper(parameters/final/RegionsMetainfo, ";");
		unit<uint8> regio := regio_raw/domain {
			attribute<string>    keyString     := string(id(.));
			container keyLandUseType := for_each_nedv(
				LandUseType/NameWithClaims 
				, 'keyString + underscore +' + quote(LandUseType/NameWithClaims)
				, regio
				, string
				);
			
			container AreaClaims := for_each_nedv(
				LandUseType/NameWithClaims 
				,'rjoin(keyLandUseType/' + LandUseType/NameWithClaims + ', Claims/ClaimTable/key, Claims/ClaimTable/Claim)'
				, regio
				, units/km2
			);
			attribute<string> Label := regio_raw/data/Countries, DialogType = "LabelText";
			attribute<string> name := AsItemName(regio_raw/data/Region); // sanitized for item naming
			attribute<string> Nr := regio_raw/data/Nr;
		}
		
		/*unit<uint8> regio
		: StorageName = "= parameters/final/RegionsMetainfo" //%GlobioSourceDataDir%/input/Regions.csv" // https://models.pbl.nl/image/index.php/Region_classification_map
		, StorageType = "gdal.vect"
		, StorageReadOnly = "True"
		, KeepData = "True"
		{
			attribute<string>    keyString     := string(id(.));
			
			container keyLandUseType := for_each_nedv(
				LandUseType/NameWithClaims 
				, 'keyString + underscore +' + quote(LandUseType/NameWithClaims)
				, regio
				, string
				);
			
			container AreaClaims := for_each_nedv(
				LandUseType/NameWithClaims 
				,'rjoin(keyLandUseType/' + LandUseType/NameWithClaims + ', Claims/ClaimTable/key, Claims/ClaimTable/Claim)'
				, regio
				, units/km2
			);
			attribute<string> Label := Countries, DialogType = "LabelText";
			attribute<string> name := AsItemName(Region); // sanitized for item naming
		}*/
	}
	
	container Suitabilities := for_each_ind(
	  'ne'                                       // options
	, parameters/final/SuitRasterName
    ,'Templates/ReadSuitabilityData(' + quote(parameters/final/SuitRasterNames) + ')' 		    // name
   );
}