container Templates
{
	Template ReadSuitabilityData
	{
		// begin case parameters
		parameter<string> suitability_filename;
		// end case parameters
		
		unit<upoint> domain
		:   StorageName = '=suitability_filename'
		,   StorageType = "gdal.grid" 
		,   DialogData  = "Geography/EPSG_4326" 
		{    
		   attribute<Float32> GridData;
		   attribute<Float32> ReadData(grid_domain); 
		}
				
	}
	
	Template MakeGrid_t {
		// begin case parameters
		attribute<Bool> compact_condition(Geography/world_domain);
		unit<uint32> compacted_domain;
		attribute<LandUseType> landuse(compacted_domain);			
		parameter<string> OutputFileName;
		// end case parameters
		
		attribute<LandUseCode> LandUseCode_rel (compacted_domain) := landuse->LandUseCode_rel;
		
		attribute<LandUseCode> result(Geography/world_domain) := recollect_by_cond(compact_condition, LandUseCode_rel)
		, StorageName = "='%GlobioSourceDataDir%/output/'+OutputFileName+'.TIF'"
		, StorageType       = "gdalwrite.grid"
		, DialogData        = "Geography/EPSG_4326";
	}
	
	Template SteppedAllocateLanduse
	{
		// begin case parameters
		parameter<LanduseType>  CurrLanduseType_rel;
		attribute<LanduseType>  org_alloc_state(domain);
		// end case parameters
		
		parameter<string> landuse_name := CurrLanduseType_rel->name;
		
		attribute<Bool> suitability_augmentation_mask (domain) := org_alloc_state == LandUseType/V/other;
		
		attribute<int32> OrgSuitabilityMap(domain) := = 'Compacted/SuitabilityMaps/' + landuse_name;
		attribute<int32> SuitabilityMap(domain) := suitability_augmentation_mask ? OrgSuitabilityMap : -1i, LazyCalculated = "True";
		
		container SuitabilityMaps
		{
			attribute<int32> alloc(domain) := SuitabilityMap;
			attribute<int32> other(domain) := const(0i, domain);
		}
		
		container SteppedClaims
		{
			Attribute<UInt32> alloc (SourceData/Regions/regio) :== 'Claims/Scaled/' + landuse_name;
			Attribute<UInt32> other (SourceData/Regions/regio) := const(0, SourceData/Regions/regio);
		}
		
		container allocate_step := discrete_alloc(alloc_type/name
			,domain
			,SuitabilityMaps
			,alloc_type/partioning_rel
			,partitioning/Name
			,AtomicRegions
			,Compacted/regio_rel
			,SteppedClaims ,SteppedClaims
			,0i
			,FeasibleSolution
		)
		{
			
		}

		attribute<bool>  allocate(domain) := (allocate_step/landuse==0b), LazyCalculated = "True";
		attribute<LanduseType> adjusted_alloc_state(domain) := allocate ? CurrLanduseType_rel : org_alloc_state, LazyCalculated = "True";
		
		attribute<uint32>  sum_per_regio (SourceData/Regions/regio) := sum_uint32(allocate, Compacted/regio_rel);
		attribute<units/km2> area_allocated (domain) := allocate ? Compacted/area : 0[units/km2], LazyCalculated = "True";
		attribute<float32> area_per_regio (SourceData/Regions/regio) := sum(area_allocated, Compacted/regio_rel);
	}
	
	Template MakeCompactedRegion
	{
		// begin case parameters
		parameter<uint8> region; // 255 for all regions
		// end case parameters
		
		parameter<string> region_name := /SourceData/Regions/regio/Label[region];
		
		attribute<Bool> compact_condition(Geography/world_domain) := and(not(SourceData/NotAllocatable/ReadData), region==255b ? True : SourceData/Regions/IMAGE/ReadData==region);
		unit<uint32> domain := select_uint32(compact_condition), DialogType = "Map", DialogData = "BaseGrid"
		{
			attribute<int64> ordinal(.) := collect_by_cond(domain, compact_condition, Geography/world_domain/ordinal);
		}
		attribute<domain> BaseGrid(Geography/world_domain) := recollect_by_cond(compact_condition, id(domain));

		attribute<LandUseCode> CurrentLandUseCode (domain) := collect_by_cond(domain, compact_condition, SourceData/CurrentLanduse/ESA_CCI/GridData);

		attribute<units/km2> area(domain)  := collect_by_cond(domain, compact_condition, SourceData/area/ReadData)[units/km2];
		
		attribute<Float32> UsageReductionFactor (domain) := collect_by_cond(domain, compact_condition, SourceData/UsageReductionFactor/ReadData);
		
		attribute<int32> plateau_augmentation_factor (domain) := int32(mod(uint32(id(domain)), uint32(pow(2f,10f))));
		parameter<float32> SuitStepFactor := pow(2.0f, 20.0f);
		/*container SuitabilityMaps // implement integrity check not larger than 1.0
		{
			attribute<Int32> Urban(domain)     := int32(collect_by_cond(domain, compact_condition, Suitabilities/Urban)    * UsageReductionFactor * SuitStepFactor) + plateau_augmentation_factor;
			attribute<Int32> Pasture(domain)   := int32(collect_by_cond(domain, compact_condition, Suitabilities/Pasture)  * UsageReductionFactor * SuitStepFactor) + plateau_augmentation_factor;
			attribute<Int32> Cropland(domain)  := int32(collect_by_cond(domain, compact_condition, Suitabilities/Cropland) * UsageReductionFactor * SuitStepFactor) + plateau_augmentation_factor;
			attribute<Int32> Forestry(domain)  := int32(collect_by_cond(domain, compact_condition, Suitabilities/Forestry) * UsageReductionFactor * SuitStepFactor) + plateau_augmentation_factor;
			attribute<Int32> RangeLand(domain) := Pasture;
			attribute<Int32> Other(domain)     := const(0i, domain) + plateau_augmentation_factor;
		}*/
		
		container SuitabilityMaps := for_each_nedv (
		  parameters/final/SuitRasterName
		, 'int32(collect_by_cond(domain, compact_condition, Suitabilities/' + parameters/final/SuitRasterName + ')    * UsageReductionFactor * SuitStepFactor) + plateau_augmentation_factor'
		, domain
		, int32
		)
		{
			attribute<Float32> Other(domain) := const(0f, domain);
		}
		
		attribute<SourceData/Regions/regio> regio_rel (domain) := collect_by_cond(domain, compact_condition, SourceData/Regions/IMAGE/ReadData);
		
		parameter<bool> use_zeroed_initial_alloc_grid := True; // necessary for nth-element allocation
		attribute<LandUseType> initial_alloc_state(domain) := = use_zeroed_initial_alloc_grid ? 'const(LandUseType/V/other, domain)' : 'CurrentLandUseCode->LandUseType_rel';
	}
	
	Template AllocateWeightedNthElement
	{
		// begin case parameters
		parameter<LanduseType> 				CurrLanduseType_rel;
		unit<uint32> 		   				compacted_domain;
		attribute<LanduseType> 				org_alloc_state(compacted_domain);
		attribute<Int32> 	   				ogr_suitability_map (compacted_domain);
		attribute<units/km2>   				area(compacted_domain);
		attribute<SourceData/Regions/regio> regio_rel (compacted_domain);
		// end case parameters
		
		parameter<string> landuse_name := CurrLanduseType_rel->name;
		
		attribute<Bool> suitability_augmentation_mask (compacted_domain) := org_alloc_state == LandUseType/V/other;
		
		//attribute<int32> ogr_suitability_map(compacted_domain) := ='Compacted/SuitabilityMaps/' + landuse_name;
		attribute<int32> SuitabilityMap(compacted_domain) := suitability_augmentation_mask ? ogr_suitability_map : -1i, LazyCalculated = "True";
		
		attribute<int32> Rank(compacted_domain) := - SuitabilityMap, LazyCalculated = "True";
		
		Attribute<Float32> AreaClaim (SourceData/Regions/regio) := ='Claims/Area/' + landuse_name;
			
		attribute<int32> zaaglijn_org (SourceData/Regions/regio) := Nth_element_weighted(Rank, float64(AreaClaim), float64(area), regio_rel);
		attribute<int32> zaaglijn(SourceData/Regions/regio) := Min_elem(zaaglijn_org, -1i32), KeepData = "True";
		
		attribute<bool> allocate(compacted_domain) := Rank < zaaglijn[regio_rel], LazyCalculated = "True";
		attribute<LanduseType> adjusted_alloc_state(compacted_domain) := allocate ? CurrLanduseType_rel : org_alloc_state, LazyCalculated = "True";
		
		attribute<uint32>  sum_per_regio (SourceData/Regions/regio) := sum_uint32(allocate, regio_rel);
		attribute<units/km2> area_allocated (compacted_domain) := allocate ? area : 0[units/km2], LazyCalculated = "True";
		attribute<float32> area_per_regio (SourceData/Regions/regio) := sum(area_allocated, regio_rel);
	}
	
	Template AllocateNthElementWeightedPerRegion
	{
		// begin case parameters
		parameter<uint8> region;
		// end case parameters
		
		container compacted_region := MakeCompactedRegion(region);
		attribute<LanduseType> initial_alloc_state(compacted_region/domain) := const(LandUseType/V/other, compacted_region/domain);
		
		container states
		{
			parameter<uint8> last_indice := uint8(#parameters/final/intermediate/lu_prio_domain)-1b;
			attribute<bool> condition (parameters/final/intermediate/lu_prio_domain):= parameters/final/LandusePriorityNames != parameters/final/LandusePriorityNames[last_indice]; // we need the 0:end-1 item as intermediate alloc states
			unit<uint8> lu_indices := select_with_attr_by_cond(parameters/final/intermediate/lu_prio_domain, condition)
			{
				attribute<string> name_with_alloc := "alloc/" + name + "/adjusted_alloc_state";
			}
			parameter<string> lu_priority_subset_as_string := "initial_alloc_state;" + AsList(lu_indices/name_with_alloc, ";"); // prepend initial_alloc_state
			attribute<string> alloc_state_item (parameters/final/intermediate/lu_prio_domain) := readlines(replace(lu_priority_subset_as_string, ';', '\n'), parameters/final/intermediate/lu_prio_domain, 0);
		}
		

		container alloc := for_each_ne (
		  parameters/final/LandusePriorityNames
		, 'Templates/AllocateWeightedNthElement(LanduseType/V/' + parameters/final/LandusePriorityNames + ', compacted_region/domain,' + states/alloc_state_item  + ', compacted_region/SuitabilityMaps/' + parameters/final/LandusePriorityNames + ', compacted_region/area, compacted_region/regio_rel)');
		
		/*container Urban     := Templates/AllocateWeightedNthElement(LanduseType/V/Urban,     compacted_region/domain, initial_alloc_state, compacted_region/SuitabilityMaps/Urban, compacted_region/area, compacted_region/regio_rel);
		container Cropland  := Templates/AllocateWeightedNthElement(LanduseType/V/Cropland,  compacted_region/domain, Urban/adjusted_alloc_state, compacted_region/SuitabilityMaps/Cropland, compacted_region/area, compacted_region/regio_rel);
		container Forestry  := Templates/AllocateWeightedNthElement(LanduseType/V/Forestry,  compacted_region/domain, Cropland/adjusted_alloc_state, compacted_region/SuitabilityMaps/Forestry, compacted_region/area, compacted_region/regio_rel);
		container Pasture   := Templates/AllocateWeightedNthElement(LanduseType/V/Pasture,   compacted_region/domain, Forestry/adjusted_alloc_state, compacted_region/SuitabilityMaps/Pasture, compacted_region/area, compacted_region/regio_rel);
		container Rangeland := Templates/AllocateWeightedNthElement(LanduseType/V/Rangeland, compacted_region/domain, Pasture/adjusted_alloc_state, compacted_region/SuitabilityMaps/Rangeland, compacted_region/area, compacted_region/regio_rel);
		*/
		
		attribute<LandUseType> Landuse (compacted_region/domain) := alloc/rangeland/adjusted_alloc_state;
		container MakeGrid := Templates/MakeGrid_t(compacted_region/compact_condition , compacted_region/domain, landuse, 'WeightedNthElement');
	}
}